//
// named.conf
//
// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
// server as a caching only nameserver (as a localhost DNS resolver only).
//
// See /usr/share/doc/bind*/sample/ for example named configuration files.
//

options {
        version none;
        hostname none;
        server-id none;

        auth-nxdomain no;
        notify no;

        listen-on port 53 { any; };
        listen-on-v6 port 53 { none; };
        directory       "/var/named";
        dump-file       "/var/named/data/cache_dump.db";
        statistics-file "/var/named/data/named_stats.txt";
        memstatistics-file "/var/named/data/named_mem_stats.txt";
        secroots-file   "/var/named/data/named.secroots";
        recursing-file  "/var/named/data/named.recursing";
        querylog yes;
        allow-query { inside-networks; };
        allow-recursion { inside-networks; };
        allow-transfer { none; };

        /*
         - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
         - If you are building a RECURSIVE (caching) DNS server, you need to enable
           recursion.
         - If your recursive DNS server has a public IP address, you MUST enable access
           control to limit queries to your legitimate users. Failing to do so will
           cause your server to become part of large scale DNS amplification
           attacks. Implementing BCP38 within your network would greatly
           reduce such attack surface
        */
        recursion yes;

        dnssec-enable yes;
        dnssec-validation auto;

        managed-keys-directory "/var/named/dynamic";

        pid-file "/run/named/named.pid";
        session-keyfile "/run/named/session.key";

        /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
        include "/etc/crypto-policies/back-ends/bind.config";

        /* Fowarders */
        forwarders {
		{{ dns.forwarder1 | default("192.168.1.254") }};
	};

};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

acl inside-networks {
        localhost;
        localnets;
};

statistics-channels {
        inet {{ dns_secondary.ipa }} port 9000 allow {any;};
};

zone "." IN {
        type hint;
        file "named.ca";
};

zone "{{ site.name }}.{{ site.domain }}"
{
        type slave;
        file "/var/named/slaves/{{ site.name }}.{{ site.domain }}";
        masters { {{ dns_primary.ipa }}; };
        allow-notify { {{ dns_primary.ipa }}; };
        zone-statistics yes;
};

zone "{{ dns_secondary.ipa.split('.')[2] }}.{{ dns_secondary.ipa.split('.')[1] }}.{{ dns_secondary.ipa.split('.')[0] }}.in-addr.arpa" {
        type slave;
        file "/var/named/slaves/{{ dns_secondary.ipa.split('.')[2] }}.{{ dns_secondary.ipa.split('.')[1] }}.{{ dns_secondary.ipa.split('.')[0] }}.in-addr.arpa";
        masters { {{ dns_primary.ipa }}; };
        allow-notify { {{ dns_primary.ipa }}; };
        zone-statistics yes;
};

// Point to internal DNS for following domain(s)
zone "{{ site.name}}.{{site.domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.corefwd1 }};
        };
};

{% if site.name != 'bldr' %}
zone "bldr.{{ site }}.{{ domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.bldrfwd1 }};
                {{ dnsfwd.bldrfwd2 }};
        };
};
{% endif %}

{% if site.name != 'cabo' %}
zone "cabo.{{ site.name }}.{{ site.domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.cabofwd1 }};
                {{ dnsfwd.cabofwd2 }};
        };
};
{% endif %}

{% if site.name != 'tato' %}
zone "tato.{{ site.name }}.{{ site.domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.tatofwd1 }};
                {{ dnsfwd.tatofwd2 }};
        };
};
{% endif %}

{% if site.name != 'lnmt' %}
zone "lnmt.{{ site.name }}.{{ site.domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.lnmtfwd1 }};
                {{ dnsfwd.lnmtfwd2 }};
        };
};
{% endif %}

{% if site.name != 'ndld' %}
zone "ndld.{{ site.name }}.{{ site.domain }}"
{
        type forward;
        forwarders {
                {{ dnsfwd.ndldfwd1 }};
                {{ dnsfwd.ndldfwd2 }};
        };
};
{% endif %}

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";

