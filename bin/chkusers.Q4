#!/usr/contrib/Q4/bin/perl

# Carl Schelin
# version 1.13
# process the user list from /etc/passwd and determine if the account has an active account
#  /usr/contrib/bin/perl This is for some versions of HP-UX
#  /usr/bin/perl         This is for Sun, Linux, and Tru64
# update script to clear 'or die' as it fails on older versions of perl. remove chomp command, same reason
# 08/23/2011 - added single ! as locked for some Linux systems.
# 09/27/2011 - fixed password/shadow mismatch by sorting after reading it in.
# 09/28/2011 - correct type in sorting of shadow array
# 10/12/2011 - added in code to copy the password/group file and append centrify details to it 
#    so the chksudoers script works for all data
# 11/1/2011 - Switched out the read/sort process to use hashes (see the parsepwd function). This lets us 
#    properly identify the centrify users (non-local) as well as local users.
# 11/1/2011 - Added centrify check to the SunOS system check.
# 11/3/2011 - Added head -1 to remove the extra finger output in the Linux section
# 10/19/2012 - Added support for FreeBSD to get the correct information
# 02/07/2014 - Added checks for adquery to make sure it's not run on systems that aren't connected to the domains.

sub parsepwd {

  my ($pwlogin, $pwpasswd, $uid, $gid, $gecos, $dir, $shell);

  my ($shlogin, $shpasswd, $lastchg, $min, $max, $warn, $inactive, $expire, $flag);

  my %pwhash = ();

  my $pwfile = '/opt/intrado/etc/passwd';
  open (PASSWD, "< $pwfile") or die "Can't open passwd file : $!";

  while (<PASSWD>) {
    ($pwlogin, $pwpasswd, $uid, $gid, $gecos, $dir, $shell) = split(":");
    ($username, $email) = split(",", $gecos);

    $pwhash{$pwlogin}{'passwd'}   = $pwpasswd; # set it here for the systems where the actually password is in the /etc/passwd file
    $pwhash{$pwlogin}{'username'} = $username;
    $pwhash{$pwlogin}{'email'}    = $email;
  }

  close PASSWD;

  my $shfile = "";
  if ($_[0] eq "FreeBSD") {
    $shfile = "/etc/master.passwd";
  } else {
    $shfile = "/etc/shadow";
  }

  if ( -e $shfile ) {
    open (SHADOW, "< $shfile");

    while (<SHADOW>) {
      if ($_[0] == "FreeBSD") {
        ($shlogin, $shpasswd, $shuid, $shgid, $shclass, $lastchg, $expire) = split(":");
        $max = 0;
        $warn = 0;
      } else {
        ($shlogin, $shpasswd, $lastchg, $min, $max, $warn, $inactive, $expire, $flag) = split(":");
      }

      $pwhash{$shlogin}{'passwd'}  = $shpasswd;
      $pwhash{$shlogin}{'lastchg'} = $lastchg;
      $pwhash{$shlogin}{'max'}     = $max;
      $pwhash{$shlogin}{'warn'}    = $warn;
    }
  }

  return \%pwhash;
}

$os = `uname`;
chop $os;

# due to Centrify, we need to copy the passwd file to create a complete list and then update 
# it with the output of the adquery user command. We'll also need to run through the output 
# and parse whether the account is disabled or not.
`cp /etc/passwd /opt/intrado/etc/`;
`cp /etc/group /opt/intrado/etc/`;

if ( -e "/usr/bin/adquery") {
  $adinfo = `/usr/bin/adinfo --domain`;
  if ($adinfo ne "") {
    open (OUTPUT, ">>/opt/intrado/etc/passwd");
    open (INPUT, "/usr/bin/adquery user|");
    while (<INPUT>) {
      print OUTPUT $_;
    }
    close INPUT;
    close OUTPUT;

    open (OUTPUT, ">>/opt/intrado/etc/group");
    open (INPUT, "/usr/bin/adquery group|");
    while (<INPUT>) {
      print OUTPUT $_;
    }
    close INPUT;
    close OUTPUT;
  }
}

my $hash = parsepwd($os);

$ndays=time / (3600 * 24);
$intrado="/opt/intrado";

@sortpasswd = `cat /opt/intrado/etc/passwd`;
@passwd = sort @sortpasswd;
if ($os eq "HP-UX") {
  open (OUTPUT,">$intrado/etc/chkusers.dat");
} else {
  open (OUTPUT,">$intrado/etc/chkusers.dat") or die("Unable to create $intrado/etc/chkusers.dat\n");
}
$hostname = `hostname | cut -f1 -d.`;
chop $hostname;

for ($i = 0; $i <= $#passwd; $i++) {
  (@info) = split(":", $passwd[$i]);

  if ($hash->{$info[0]}{'lastchg'} eq "") {  # last changed value
    $hash->{$info[0]}{'lastchg'} = 0;
  }
  if ($hash->{$info[0]}{'max'} eq "") {  # max value
    $hash->{$info[0]}{'max'} = -1;
  }
  if ($hash->{$info[0]}{'warn'} eq "") {  # warn value
    $hash->{$info[0]}{'warn'} = 0;
  }

  $output = "Active";

# Tru64
  if ($os eq "OSF1") {

    $last = `/usr/bin/finger $info[0] | /sbin/grep "^Last login" | /usr/bin/head -1 | /usr/bin/cut -c16-21`;
    chop $last;

    if ($last eq "") {
      $last = `/usr/bin/finger $info[0] | /sbin/grep "^On since" | /usr/bin/head -1 | /usr/bin/cut -c10-15`;
      chop $last;
    }

    $auth = `/usr/bin/passwd -q $info[0]`;

    (@data) = split(" ", $auth);

    if ($data[1] eq "LK") {
      $output = "Locked";
    }
  }
# HP-UX
  if ($os eq "HP-UX") {

# commenting out as it takes hours to run on HP-UX systems (why so slow; large wtmpx file)
#    $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^Last login" | /usr/bin/head -1 | /usr/bin/cut -c16-21`;
#    chop $last;

#    if ($last eq "") {
#      $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^On since" | /usr/bin/head -1 | /usr/bin/cut -c10-15`;
#      chop $last;
#    }

# is the system "TRUSTED"?
    if ( -e "/tcb/files/auth/system/default" ) {

      $status = `/usr/lbin/getprpw -m alock $info[0]`;
      chop $status;
      if ( $status eq "alock=YES" ) {
        $output = "Locked";
      }
      $status = `/usr/lbin/getprpw -m lockout $info[0] | cut -f2 -d= | cut -c1`;
      chop $status;
      if ( $status eq "1" ) {
        $output = "PastLifetime";
      }
      $status = `/usr/lbin/getprpw -m lockout $info[0] | cut -f2 -d= | cut -c2`;
      chop $status;
      if ( $status eq "1" ) {
        $output = "Inactive";
      }
      $status = `/usr/lbin/getprpw -m lockout $info[0] | cut -f2 -d= | cut -c3`;
      chop $status;
      if ( $status eq "1" ) {
        $output = "Lifetime";
      }
      $status = `/usr/lbin/getprpw -m lockout $info[0] | cut -f2 -d= | cut -c4`;
      chop $status;
      if ( $status eq "1" ) {
        $output = "ExceededAttempts";
      }
      $status = `/usr/lbin/getprpw -m lockout $info[0] | cut -f2 -d= | cut -c6`;
      chop $status;
      if ( $status eq "1" ) {
        $output = "AdminLock";
      }

    } else {

      $auth = `/usr/bin/passwd -s $info[0]`;

      (@data) = split(" ", $auth);

      if ($data[1] eq "LK") {
        $output = "Locked";
      }
    }
  }

# Solaris
  if ($os eq "SunOS") {

    $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^Last login" | /usr/bin/head -1 | /usr/bin/cut -c16-21`;
    chop $last;

    if ($last eq "") {
      $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^On since" | /usr/bin/head -1 | /usr/bin/cut -c10-15`;
      chop $last;
    }

# set the failure string
    $result = "Error: No such user $info[0]";
    $zoneuser = "";
    if ( -e "/usr/bin/adquery" ) {
      $adinfo = `/usr/bin/adinfo --domain`;
      if ($adinfo ne "") {
        open (INPUT, "/usr/bin/adquery user " . $info[0] . "|");
        while (<INPUT>) {
          chomp;
          $zoneuser = $_;
        }
        close INPUT;

        if (length($zoneuser) > 0) {
          $q_string = "/usr/bin/adquery user " . $info[0] . " --disabled|";
          open (INPUT, $q_string);
          while (<INPUT>) {
            chomp;
            $result = $_;
          }
          close INPUT;

          (@list) = split(",", $info[4]);

          if ($result eq "false") {
            $output = "Active";
            $info[4] = $list[1] . " " . $list[0] . ",centrify";
            $info[4] =~ s/^\s+//;
          }
          if ($result eq "true") {
            $output = "Disabled";
            $info[4] = $list[1] . " " . $list[0] . ",centrify";
            $info[4] =~ s/^\s+//;
          }
        }
      }
    }

    if ($result eq "Error: No such user $info[0]") {
# check for password expiring
      if ($hash->{$info[0]}{'max'} != -1) {
        $delta = $ndays - $hash->{$info[0]}{'lastchg'};
        $expire = $hash->{$info[0]}{'max'} - $delta;
        if ($expire le $hash->{$info[0]}{'warn'}) {
          $output = "Expiring";
        }
        if ($expire le 0) {
          $output = "Expired";
        }
      }
# ignore password expiration if account is locked.
      $data = substr($hash->{$info[0]}{'passwd'}, 0, 4);
      if ($data eq "*LK*") {
        $output = "Locked";
      }
      if ($hash->{$info[0]}{'passwd'} eq "NP") {
        $output = "NoPassword";
      }
    }
  }
# Linux
  if ($os eq "Linux") {

    $last = `/usr/bin/finger $info[0] | /bin/grep "^Last login" | /usr/bin/head -1 | /usr/bin/cut -c16-21`;
    chop $last;

    if ($last eq "") {
      $last = `/usr/bin/finger $info[0] | /bin/grep "^On since" | /usr/bin/head -1 | /usr/bin/cut -c10-15`;
      chop $last;
    }

# set the failure string
    $result = "Error: No such user $info[0]";
    $zoneuser = "";
    if ( -e "/usr/bin/adquery" ) {
      $adinfo = `/usr/bin/adinfo --domain`;
      if ($adinfo ne "") {
        open (INPUT, "/usr/bin/adquery user " . $info[0] . "|");
        while (<INPUT>) {
          chomp;
          $zoneuser = $_;
        }
        close INPUT;

        if (length($zoneuser) > 0) {
          $q_string = "/usr/bin/adquery user " . $info[0] . " --disabled|";
          open (INPUT, $q_string);
          while (<INPUT>) {
            chomp;
            $result = $_;
          }
          close INPUT;

          (@list) = split(",", $info[4]);

          if ($result eq "false") {
            $output = "Active";
            $info[4] = $list[1] . " " . $list[0] . ",centrify";
            $info[4] =~ s/^\s+//;
          }
          if ($result eq "true") {
            $output = "Disabled";
            $info[4] = $list[1] . " " . $list[0] . ",centrify";
            $info[4] =~ s/^\s+//;
          }
        }
      }
    }

    if ($result eq "Error: No such user $info[0]") {
# check for password expiring
      if ($hash->{$info[0]}{'max'} != -1) {
        $delta = $ndays - $hash->{$info[0]}{'lastchg'};
        $expire = $hash->{$info[0]}{'max'} - $delta;
        if ($expire le $hash->{$info[0]}{'warn'}) {
          $output = "Expiring";
        }
        if ($expire le 0) {
          $output = "Expired";
        }
      }
# ignore password expiration if account is locked.
      if ($hash->{$info[0]}{'passwd'} eq "*") {
        $output = "Locked";
      }
      $data = substr($hash->{$info[0]}{'passwd'}, 0, 2);
      if ($data eq "!!") {
        $output = "Locked";
      }
      $data = substr($hash->{$info[0]}{'passwd'}, 0, 1);
      if ($data eq "!") {
        $output = "Locked";
      }
    }
  }
# FreeBSD
  if ($os eq "FreeBSD") {

    $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^Last login" | /usr/bin/head -1 | /usr/bin/cut -c16-21`;
    chop $last;

    if ($last eq "") {
      $last = `/usr/bin/finger $info[0] | /usr/bin/grep "^On since" | /usr/bin/head -1 | /usr/bin/cut -c14-19`;
      chop $last;
    }

    $data = substr($hash->{$info[0]}{'passwd'}, 0, 8);
    if ($data eq "*LOCKED*") {
      $output = "Locked";
    }
  }

  print OUTPUT "$hostname:$info[0]:$info[4]:$hash->{$info[0]}{'lastchg'}:$last:$output\n";
}

close OUTPUT

