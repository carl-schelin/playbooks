#!/bin/ksh

#BASENAME=$(basename "${0}")
DIRNAME=$(dirname "${0}")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# Source the configuration file
. "${DIRNAME}"/../.config

# prevent the Netbackup Fiber Transport client from starting. Caused an incident where incofmc2 failed to completely start due to the nbfbclnt script halting on starting the agent.
if [[ -f /usr/openv/netbackup/bin/nbftclnt ]]
then
  chmod -x /usr/openv/netbackup/bin/nbftclnt
fi

for i in chkdef chketh chkif chkov chkprinter chkraid chksan chkstack chksudo chksudoers chkusers chkusers.contrib chkversion logme
do
  if [[ -f /usr/local/bin/$i ]]
  then
    echo "Removing /usr/local/bin/$i"
    rm /usr/local/bin/$i
  fi
done

for i in arcconf.output chketh.output chkstack.output chksudo.output chkusers.dat defunct.data ifconfig.output megarc.output metadb.output metastat.output raidctl.output
do
  if [[ -f /usr/local/etc/$i ]]
  then
    echo "Removing /usr/local/etc/$i"
    rm /usr/local/etc/$i
  fi
done

if [[ -d /opt/cfghtml ]]
then
  echo "Moving /opt/cfghtml to ${SCRIPTS}/"
  mv /opt/cfghtml ${SCRIPTS}/
fi

if [[ -d /opt/ov ]]
then
  if [[ -f /opt/OV/bin/ovc ]]
  then
    echo "Removing /opt/ov"
    rm -rf /opt/ov
  fi
fi

if [[ -d /opt/nbu ]]
then
  if [[ -f /usr/openv/netbackup/bp.conf ]]
  then
    echo "Removing /opt/nbu"
    rm -rf /opt/nbu
  fi
fi

if [[ -f /var/tmp/openview.failed ]]
then
  echo "Moving openview.failed to ${SCRIPTS_LOGS}/"
  mv /var/tmp/openview.failed ${SCRIPTS_LOGS}/
fi

if [[ -f /usr/local/patchdiag ]]
then
  echo "Removing /usr/local/patchdiag"
  rm -rf /usr/local/patchdiag
fi

# process to provide more detail to the MOTD presentation
if [[ -f ${SCRIPTS_DATA}/motd ]]
then
  cp ${SCRIPTS_DATA}/motd /etc/motd
  cp ${SCRIPTS_DATA}/motd /etc/issue
  chmod 644 /etc/motd
  chmod 644 /etc/issue

  GREEN="\033[32m"
  RED="\033[31m"
  YELLOW="\033[33m"
  RESET="\033[0m"
# not showing color on all systems so disable for now
  RED=""
  RESET=""
  YEAR=`date +"%Y"`
  MONTH=`date +"%m"`
  DAY=`date +"%d"`

# making the variable match 
  HARDWARESUPPORT=`grep "^Support Contract:" ${SCRIPTS_DATA}/fingerprint | awk '{print $3}'`

  EOLHARDWARE=`grep "^Hardware EOL:" ${SCRIPTS_DATA}/fingerprint | awk '{print $3}'`
  HWYEAR=`echo $EOLHARDWARE | cut -f1 -d-`
  HWMONTH=`echo $EOLHARDWARE | cut -f2 -d-`
  HWDAY=`echo $EOLHARDWARE | cut -f3 -d-`

  EOLSOFTWARE=`grep "^Software EOL:" ${SCRIPTS_DATA}/fingerprint | awk '{print $3}'`
  SWYEAR=`echo $EOLSOFTWARE | cut -f1 -d-`
  SWMONTH=`echo $EOLSOFTWARE | cut -f2 -d-`
  SWDAY=`echo $EOLSOFTWARE | cut -f3 -d-`

  if [[ ! $EOLSOFTWARE = '0000-00-00' ]]
  then
# if before this year, report an error
    if [[ $SWYEAR -lt $YEAR ]]
    then
      echo "    =======================================================================" >> /etc/motd
      echo "    =========  Lifecycle Notification from the Unix Team         ==========" >> /etc/motd
      echo "    =========  Status: CRITICAL                                  ==========" >> /etc/motd
      echo "    =========  Operating System Reached End of Life: ${EOLSOFTWARE}  ==========" >> /etc/motd
      echo "    =======================================================================" >> /etc/motd
    else
# if this year and before this month, report an error
      if [[ $SWYEAR -eq $YEAR ]] && [[ $SWMONTH -lt $MONTH ]]
      then
        echo "    =======================================================================" >> /etc/motd
        echo "    =========  Lifecycle Notification from the Unix Team         ==========" >> /etc/motd
        echo "    =========  Status: CRITICAL                                  ==========" >> /etc/motd
        echo "    =========  Operating System Reached End of Life: ${EOLSOFTWARE}  ==========" >> /etc/motd
        echo "    =======================================================================" >> /etc/motd
      else
# if it's this year and this month and less than _or_ equal to today, report an error
        if [[ $SWMONTH -eq $MONTH ]] && [[ $SWDAY -le $DAY ]]
        then
          echo "    =======================================================================" >> /etc/motd
          echo "    =========  Lifecycle Notification from the Unix Team         ==========" >> /etc/motd
          echo "    =========  Status: CRITICAL                                  ==========" >> /etc/motd
          echo "    =========  Operating System Reached End of Life: ${EOLSOFTWARE}  ==========" >> /etc/motd
          echo "    =======================================================================" >> /etc/motd
        fi
      fi
    fi
  fi

# if before this year, report an error
  if [[ ! $HARDWARESUPPORT = "N/A" ]]
  then
    if [[ $HARDWARESUPPORT = 'No' ]]
    then
      echo "    =====================================================================" >> /etc/motd
      echo "    =========  Lifecycle Notification from the Unix Team       ==========" >> /etc/motd
      echo "    =========  Status: CRITICAL                                ==========" >> /etc/motd
      echo "    =========  System Hardware is not currently under support  ==========" >> /etc/motd
      echo "    =====================================================================" >> /etc/motd
    fi
    if [[ ! $EOLHARDWARE = '0000-00-00' ]]
    then
      if [[ $HWYEAR -lt $YEAR ]]
      then
        echo "    ======================================================================" >> /etc/motd
        echo "    =========  Lifecycle Notification from the Unix Team        ==========" >> /etc/motd
        echo "    =========  Status: CRITICAL                                 ==========" >> /etc/motd
        echo "    =========  System Hardware Reached End of Life: ${EOLHARDWARE}  ==========" >> /etc/motd
        echo "    ======================================================================" >> /etc/motd
      else
# if this year and before this month, report an error
        if [[ $HWYEAR -eq $YEAR ]] && [[ $HWMONTH -lt $MONTH ]]
        then
          echo "    ======================================================================" >> /etc/motd
          echo "    =========  Lifecycle Notification from the Unix Team        ==========" >> /etc/motd
          echo "    =========  Status: CRITICAL                                 ==========" >> /etc/motd
          echo "    =========  System Hardware Reached End of Life: ${EOLHARDWARE}  ==========" >> /etc/motd
          echo "    ======================================================================" >> /etc/motd
        else
# if it's this year and this month and less than _or_ equal to today, report an error
          if [[ $HWMONTH -eq $MONTH ]] && [[ $HWDAY -le $DAY ]]
          then
            echo "    ======================================================================" >> /etc/motd
            echo "    =========  Lifecycle Notification from the Unix Team        ==========" >> /etc/motd
            echo "    =========  Status: CRITICAL                                 ==========" >> /etc/motd
            echo "    =========  System Hardware Reached End of Life: ${EOLHARDWARE}  ==========" >> /etc/motd
            echo "    ======================================================================" >> /etc/motd
          fi
        fi
      fi
    fi
  fi

fi

if [[ -f /tmp/newuser ]]
then
  rm /tmp/newuser
  rm /tmp/newuser.add
  rm /tmp/newuser.pw
  rm /tmp/newuser.users
fi

if [[ ! -f /usr/bin/ksh ]]
then
  if [[ -f /bin/ksh ]]
  then
    ln -s /bin/ksh /usr/bin/ksh
  fi
fi

# change ownership of unixsvc authorized_keys file
UNIXSVC=$(grep "^unixsvc:" /etc/passwd | cut -f6 -d:)
if [[ ! -z $UNIXSVC ]]
then
  chown unixsvc:unixsvc "${UNIXSVC}"/.ssh/*
  chmod 600 "${UNIXSVC}"/.ssh/*
  chmod 700 "${UNIXSVC}"/.ssh
fi

# remove log files older than 10 days
find ${SCRIPTS_LOGS} -name logfile.* -mtime +10 -exec rm {} \;

# and remove old log files than 90 days (3 files)
find ${SCRIPTS_LOGS} -name intrado.log.* -mtime +92 -exec rm {} \;

# remove runnow script if it exists. the chkov script deletes it after running but if chkov isn't enabled, it won't run or be removed. This auto-removes it.
if [[ -f ${SCRIPTS_BINS}/runnow ]]
then
  rm ${SCRIPTS_BINS}/runnow
fi
if [[ -f ${SCRIPTS_BINS}/runonce ]]
then
  rm ${SCRIPTS_BINS}/runonce
fi

# delete any retired scripts and data files.

for i in chkarray chkems chkipcs chkomsa chkroutetable chksudo sync-clock leaping ovhfchk ovupdate retired setdate chksudo chksecurity chksync chktime chkprofile runps getsysinfo chkapa chkpwck
do
  if [[ -f ${SCRIPTS_BINS}/$i ]]
  then
    rm ${SCRIPTS_BINS}/$i
  fi
done

for i in chkarray.output chkems.output chkipcs.output chksudo.output leaping.run chkomsa.out routetable.output chksecurity.output chksudo.output chktime.output chkprofile.output chkapa.output chkpwck.output
do
  if [[ -f ${SCRIPTS_LOGS}/$i ]]
  then
    rm ${SCRIPTS_LOGS}/$i
  fi
done

for i in leaping.log
do
  if [[ -f ${SCRIPTS_LOGS}/$i ]]
  then
    rm ${SCRIPTS_LOGS}/$i
  fi
done

# server specific files that aren't needed any more

SERVERS="coolcaecada11 coolcaecera11 coolcaecera1b coolcaecera21 coolcaecera2b coolcaecera31 enwdcoecada1b enwdcoecadb1b enwdcoecera1b enwdcoecera2b enwdcoecera3b enwdcoecerb1b "
SERVERS="$SERVERS enwdcoecerb2b enwdcoecerb3b enwdcoecmpb1b enwdcoecutb1b lnmtcodccl20 miamfldctxb0 miamflecada1b miamflecadb1b miamflecera1b miamflecera2b miamflecera3b "
SERVERS="$SERVERS miamflecerb1b miamflecerb2b miamflecerb3b miamflecuta1b miamflecutb1b incoov01 "

for i in $SERVERS
do
  if [[ -f ${SCRIPTS_BINS}/$i ]]
  then
    rm ${SCRIPTS_BINS}/$i
  fi
done

# transition stuff between /opt/intrado/var and /opt/intrado/etc
INVAR="/opt/intrado/var"
INETC="/opt/intrado/etc"

for i in 2011 2012 2013 2014 2015 2016 2017
do
  if [[ -f ${INVAR}/logfile.${i}* ]]
  then
    rm ${INVAR}/logfile.${i}*
  fi
  if [[ -f ${INVAR}/intrado.log.${i}* ]]
  then
    rm ${INVAR}/intrado.log.${i}*
  fi
done

mv ${INVAR}/logfile.* ${INETC}/
mv ${INVAR}/intrado.log.* ${INETC}/

for i in carl chkopenview.completed enwdcoecuta1b.log lsof.output opcagt.status.output ovstatus.output
do
  if [[ -f ${INVAR}/$i ]]
  then
    rm ${INVAR}/$i
  fi
done

for i in openview.failed intrado.log recert.log
do
  if [[ -f ${INETC}/$i ]]
  then
    if [[ -f ${INVAR}/$i ]]
    then
      cat ${INETC}/$i >> ${INVAR}/$i
    fi
  fi
  if [[ -f ${INVAR}/$i ]]
  then
    mv ${INVAR}/$i ${INETC}/$i
  fi
done

for i in group.master.backup 
do
  if [[ -f ${SCRIPTS_DATA}/$i ]]
  then
    rm ${SCRIPTS_DATA}/$i
  fi
done

# extra bits found when checking to make sure things are clean

if [[ -f ${SCRIPTS_VARS}/enwdcoecuta1b.log ]]
then
  rm ${SCRIPTS_VARS}/enwdcoecuta1b.log
fi

for i in opctrapi.failed openview.stop vxprint.output
do
  if [[ -f ${INVAR}/$i ]]
  then
    mv ${INVAR}/$i ${INETC}/$i
  fi
done

if [[ -d ${SCRIPTS_BINS}/scripts ]]
then
  rm -rf ${SCRIPTS_BINS}/scripts
fi

if [[ -d ${SCRIPTS_BINS}/decommissioned ]]
then
  rm -rf ${SCRIPTS_BINS}/decommissioned
fi

for i in chkconfig incomsu1 yodo ntpd.output oracle.output enwdcoecuta1b STDOUT nohup.out culali01 1 culali03 elmali01 elmali03
do
  if [[ -f ${SCRIPTS_BINS}/$i ]]
  then
    rm ${SCRIPTS_BINS}/$i
  fi
done

# being ready for unixsuite scripts
if [[ ! -f /opt/unixsuite ]]
then
  mkdir /opt/unixsuite
  mkdir /opt/unixsuite/bin
  mkdir /opt/unixsuite/etc
  mkdir /opt/unixsuite/var
  mkdir /opt/unixsuite/server.d
  mkdir /opt/unixsuite/run.d
  chown -R unixsvc:sysadmin /opt/unixsuite
fi

# standardizing rsync to /usr/local/bin/rsync so the intrado scripts can be rsync'd instead of just copied.
if [[ ! -f /usr/local/bin/rsync ]]
then
  if [[ -f /usr/bin/rsync ]]
  then
    ln /usr/bin/rsync /usr/local/bin/rsync
  fi
fi

# remove this file:
if [[ -f ${SCRIPTS_DATA}/Unix_Backups_Last_7Days.html ]]
then
  rm ${SCRIPTS_DATA}/Unix_Backups_Last_7Days.html
fi

# clean up old crash dump files
if [[ -f /var/crash ]]
then
  find /var/crash -atime +32 -exec rm -f {} \;

# delete any empty directories now
  cd /var/crash
  for i in `find . -maxdepth 1 -type d -empty`
  do
    rmdir $i
  done

fi

