#!/bin/bash

# chkserver - Check the postinstall steps where possible
# Owner: Carl Schelin
# 2013/05/21
# Description: Run through the defined steps to quickly see what might need to be done
#   on a system to complete the installation.
# 2013/05/21 - CS - Fixed spelling on a couple of items. Added check of root's cron if intrado script hasn't been run yet
# 2017/02/21 - CS - Checked in to RCS
# 2017/05/22 - CS - Removed extra interfaces, count interfaces to see if routes need to be checked
# 2017/06/20 - CS - added chkserver.input validation steps.
# 2017/06/22 - CS - Updated to add color and add more things to check
# 2017/06/22 - CS - Updated to check for vmtools installation
# 2017/06/22 - CS - Added color and clean up some of the messages
# 2017/06/26 - CS - write out to .output file like all the others.
# 2017/06/26 - CS - Updated to manage gateways better
# 2017/06/27 - CS - Updated to check all admin default passwords, not just unixsvc
# 2017/06/27 - CS - Updated to show root in the listing
# 2017/06/27 - CS - Updated to fine the right path to the ip command
# 2017/06/29 - CS - Updated the check with grep
# 2017/06/30 - CS - Added subscription manager check, added group membership check
# 2017/06/30 - CS - Fixed typo
# 2017/06/30 - CS - Updated with the correct info
# 2017/06/30 - CS - Remove extra quotes from check
# 2017/06/30 - CS - Fixed the output of grep
# 2017/07/03 - CS - Updated to check for the RemoveIPC value (set to yes; warning)
# 2017/07/03 - CS - Updated to manage colors better (warning, error, and good)
# 2017/07/05 - CS - Updated to fix messages
# 2017/07/05 - CS - Updated to add a security check
# 2017/07/05 - CS - Fixed log info. Fixed data file parse. Updated to check the interface file for Gateway info in addition to the network file
# 2017/07/05 - CS - Updated to change the title and to add the email check for user access
# 2017/07/05 - CS - Updated text
# 2017/07/05 - CS - Updated to add every GATEWAY to the output
# 2017/07/06 - CS - Fix grep output (was displaying emails; add -q to quiet) also added -i to ignore case
# 2017/07/06 - CS - Check for locked account in order to filter messages out
# 2017/07/06 - CS - Add check for Mail Server access
# 2017/07/06 - CS - Added OpNet check
# 2017/07/06 - CS - Update message display
# 2017/07/06 - CS - Add a trailing $ to the IP check to keep from multiple hits due to single digit host IPs
# 2017/07/06 - CS - Updated to add a message for the email check
# 2017/07/10 - CS - Update warning messages with appropriate color
# 2017/07/10 - CS - Added check for access to incojs01
# 2017/07/10 - CS - Added check for time
# 2017/07/11 - CS - Removed private networks from gateway ping test
# 2017/07/11 - CS - updated to ping servers before checking functionality
# 2017/07/13 - CS - Add check of the route table. Just parrot the routetable.output file
# 2017/07/17 - CS - Backup check
# 2017/07/19 - CS - Added user doesn't exist error for users who may not be in the right group

PROGNAME="chkserver"
COUNT=0
GATEWAY=''
GWFLAG='no'
GWMSG=''
OS=`uname`
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"
INTRADO=/opt/intrado
LOG=$INTRADO/etc/chkserver.output
SEVEN=$(( 86400 * 7 ))

if [[ -f $LOG ]]
then
  rm $LOG
fi

echo "" > $LOG
echo "================================" >> $LOG
echo "Running System Validation Script" >> $LOG
echo "================================" >> $LOG
echo "" >> $LOG

echo -e "${GREEN}Passed${RESET} - Test or value was successful" >> $LOG
echo -e "${YELLOW}Warning${RESET} - Setting should be reviewed and corrected if appropriate" >> $LOG
echo -e "${RED}Error${RESET} - Must be corrected due to vulnerability or system stability issue" >> $LOG
echo "" >> $LOG

if [[ $OS = "Linux" ]]
then
  if [[ `id -u` -ne 0 ]]
  then
    echo -e "${RED}Due to the checks, this script must be run by root.${RESET}"
    exit 0
  fi

  HOSTNAME=`hostname|cut -f1 -d.`
  grep -qi ${HOSTNAME} /etc/hosts
  if [[ $? = 0 ]]
  then
    echo -e "  ${GREEN}${HOSTNAME} is in /etc/hosts${RESET}" >> $LOG
  else
    echo -e "  ${YELLOW}${HOSTNAME} not in /etc/hosts${RESET}" >> $LOG
  fi

# Step 5: sudoers check
  if [[ -f /etc/sudoers ]]
  then
    grep -qi ${HOSTNAME} /etc/sudoers
    if [[ $? = 1 ]]
    then
      echo -e "  ${YELLOW}/etc/sudoers doesn't contain ${HOSTNAME} alias${RESET}" >> $LOG
    fi
  else
    echo -e "  ${RED}/etc/sudoers not found${RESET}" >> $LOG
  fi

# Step 10: check /etc/resolv.conf
  if [[ -f /etc/resolv.conf ]]
  then
    COUNT=`grep -v "^#" /etc/resolv.conf | grep -c nameserver`
    if [[ $COUNT = 0 ]]
    then
      echo -e "  ${RED}No nameserver entries found in /etc/resolv.conf${RESET}" >> $LOG
    else
      for i in `grep -v "^#" /etc/resolv.conf | grep nameserver | awk '{print $2}'`
      do
        echo -e "  ${GREEN}Found nameserver ${i} in /etc/resolv.conf${RESET}" >> $LOG
        ping -c 1 ${i} > /dev/null 2>&1
        if [[ $? = 0 ]]
        then
          echo -e "    ${GREEN}Nameserver ${i} pingable${RESET}" >> $LOG
          OUTPUT=`nslookup incojs01 ${i} | grep "Address: 10.100.78.143"`
          if [[ -z $OUTPUT ]]
          then
            echo -e "    ${RED}Unable to resolve incojs01${RESET}" >> $LOG
          else
            echo -e "    ${GREEN}Resolved incojs01${RESET}" >> $LOG
          fi
        else
          echo -e "    ${RED}Nameserver ${i} is not pingable${RESET}" >> $LOG
        fi
      done
    fi
  fi


# Step 11: check routes
  if [[ ! -f $INTRADO/etc/routetable.output ]]
  then
    $INTRADO/bin/chkroutetable
  fi
  if [[ -s $INTRADO/etc/routetable.output ]]
  then
    echo -e "  ${RED}Route table mismatch." >> $LOG
    cat $INTRADO/etc/routetable.output >> $LOG
    echo -en "${RESET}" >> $LOG
  fi

# running red hat 7
  if [[ -f /bin/chronyc ]]
  then
    echo -e "  ${GREEN}Checking chrony time sources.${RESET}" >> $LOG
    ping -c 1 10.100.228.31 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Longmont (10.100.228.31) is pingable.${RESET}" >> $LOG
      OUTPUT=`/bin/chronyc -n sources | grep 10.100.228.31`
      if [[ -z $OUTPUT ]]
      then
        echo -e "    ${RED}Unable to locate Longmont time server (10.100.228.31) using chronyc.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${GREEN}Longmont (10.100.228.31) is not pingable.${RESET}" >> $LOG
    fi
    ping -c 1 192.168.200.20 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Miami (192.168.200.20) is pingable.${RESET}" >> $LOG
      OUTPUT=`/bin/chronyc -n sources | grep 192.168.200.20`
      if [[ -z $OUTPUT ]]
      then
        echo -e "    ${RED}Unable to locate Miami time server (192.168.200.20) using chronyc.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${GREEN}Miami (192.168.200.20) is not pingable.${RESET}" >> $LOG
    fi
    DRIFTFILE=`grep driftfile /etc/chrony.conf | awk '{print $2}'`
    DRIFTPATH=`dirname $DRIFTFILE`
    if [[ -d ${DRIFTPATH} ]]
    then
      if [[ ! -f ${DRIFTFILE} ]]
      then
        echo -e "    ${YELLOW}chrony drift file (${DRIFTFILE}) does not exist.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${RED}chrony drift file path (${DRIFTPATH}) does not exist.${RESET}" >> $LOG
    fi
  fi

# running red hat 6
  if [[ -f /usr/sbin/ntpq ]]
  then
    echo -e "  ${GREEN}Checking ntp time sources.${RESET}" >> $LOG
    ping -c 1 10.100.228.31 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Longmont (10.100.228.31) is pingable.${RESET}" >> $LOG
      OUTPUT=`/usr/sbin/ntpq -pn | grep 10.100.228.31`
      if [[ -z $OUTPUT ]]
      then
        echo -e "  ${RED}Unable to locate Longmont time server (10.100.228.31) using chronyc.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${RED}Longmont (10.100.228.31) is not pingable.${RESET}" >> $LOG
    fi
    ping -c 1 192.168.200.20 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Miami (192.168.200.20) is pingable.${RESET}" >> $LOG
      OUTPUT=`/usr/sbin/ntpq -pn | grep 192.168.200.20`
      if [[ -z $OUTPUT ]]
      then
        echo -e "  ${RED}Unable to locate Miami time server (192.168.200.20) using chronyc.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${RED}Miami (192.168.200.20) is not pingable.${RESET}" >> $LOG
    fi
    DRIFTFILE=`grep driftfile /etc/ntp.conf | awk '{print $2}'`
    DRIFTPATH=`dirname $DRIFTFILE`
    if [[ -d ${DRIFTPATH} ]]
    then
      if [[ ! -f ${DRIFTFILE} ]]
      then
        echo -e "    ${YELLOW}ntp drift file (${DRIFTFILE}) does not exist.${RESET}" >> $LOG
      fi
    else
      echo -e "    ${RED}ntp drift file path (${DRIFTPATH}) does not exist.${RESET}" >> $LOG
    fi
  fi

# check for email server access
  echo -e "  ${GREEN}Checking mail server (10.100.104.6:25)${RESET}" >> $LOG
  ping -c 1 10.100.104.6 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    echo -e "    ${GREEN}Email server is pingable${RESET}" >> $LOG
    echo "quit" | /bin/nc -vn 10.100.104.6 25 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Email is accessible${RESET}" >> $LOG
    else
      echo -e "    ${RED}Email is not accessible${RESET}" >> $LOG
    fi
  else
    echo -e "    ${RED}Email server is not pingable${RESET}" >> $LOG
  fi

# check for incojs01 server access
  echo -e "  ${GREEN}Checking jumpstart server (10.100.78.143:80)${RESET}" >> $LOG
  ping -c 1 10.100.78.143 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    echo -e "    ${GREEN}Jumpstart server is pingable${RESET}" >> $LOG
    echo "\n\n" | nc -vn 10.100.78.143 80 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      echo -e "    ${GREEN}Jumpstart web server is accessible${RESET}" >> $LOG
    else
      echo -e "    ${RED}Jumpstart web server is not accessible${RESET}" >> $LOG
    fi
  else
    echo -e "    ${RED}Jumpstart server is not pingable${RESET}" >> $LOG
  fi


  if [[ ! -f /usr/bin/subscription-manager ]]
  then
    echo -e "  ${RED}Subscription-Manager not installed${RESET}" >> $LOG
  else
    echo -e "  ${GREEN}Subscription-Manager is installed${RESET}" >> $LOG
    STATUS=`/usr/bin/subscription-manager list | grep "^Status:" | awk '{print $2}'`
    if [[ $STATUS = 'Unknown' ]]
    then
      echo -e "    ${RED}System is not subscribed to Satellite${RESET}" >> $LOG
    fi
    if [[ $STATUS = 'No' ]]
    then
      echo -e "    ${RED}System is not subscribed to Satellite${RESET}" >> $LOG
    fi
    if [[ $STATUS = 'Subscribed' ]]
    then
      echo -e "    ${GREEN}System is subscribed to Satellite${RESET}" >> $LOG
    fi
    if [[ $STATUS = 'Expired' ]]
    then
      echo -e "    ${YELLOW}System subscription has expired${RESET}" >> $LOG
    fi
  fi


  echo -e "  ${GREEN}Group membership verification${RESET}" >> $LOG
  for i in `cut -f1 -d: /etc/group`
  do
    grep -qi "^${i}:" $INTRADO/etc/group.master
    if [[ $? = 0 ]]
    then
# found the group in the group.master file. Now check all users in group.master list against /etc/group list and throw an error if not found
      for j in `grep "^${i}:" $INTRADO/etc/group.master | cut -f2 -d: | sed -e "s/,/ /g"`
      do
        egrep -qi "^${j}:" /etc/passwd
        if [[ $? = 1 ]]
        then
          echo -e "    ${RED}${j} does not have a login on this system${RESET}" >> $LOG
          egrep -qi "^${i}:.*(:|,)${j}(,|$)" /etc/group
          if [[ $? = 1 ]]
          then
            echo -e "    ${RED}${j} was not found in the ${i} group in /etc/group${RESET}" >> $LOG
          fi
        fi
      done
# now check all users in /etc/group against group.master and throw an error if found
      for j in `grep "^${i}:" /etc/group | cut -f4 -d: | sed -e "s/,/ /g"`
      do
        egrep -qi "^${i}.*(:|,)${j}(,|$)" $INTRADO/etc/group.master
        if [[ $? = 1 ]]
        then
          echo -e "    ${RED}${j} was found in the ${i} group in /etc/group but not in group.master${RESET}" >> $LOG
        fi
      done
    fi
  done

# check the password against the kickstart default
# leave root and all the admins in the listing, even the ones that are gone, as they may still be set to default
  echo -e "  ${GREEN}Account password verification${RESET}" >> $LOG
  for j in root cschelin kzupan jnoyes tcooper escott mchahud jschroet jmetz ppietras unixsvc
  do
    UNIXDEF='$1$YDorwFsD$0/fIFtn7YZhMvZjAUZ.V./'
    UNIXPW=`grep "^${j}:" /etc/shadow | grep ":${UNIXDEF}:"`
    if [[ ! -z $UNIXPW ]]
    then
      echo -e "    ${RED}${j} account password is still set to the default${RESET}" >> $LOG
    fi
  done


# see if the user is in the chksudoers.dat file. This indicates the user has privileged access.
# error if the user is not in the chksudo.dat file.
# error if the date is older than the expiration date.
#lnmt1cuomrcs1:cschelin:Carl Schelin,carl.schelin@intrado.com:yes:Expired
  if [[ -f $INTRADO/etc/chksudo.dat ]]
  then
    echo -e "  ${GREEN}Privileged access review${RESET}" >> $LOG
    EPOCH=`date +"%s"`
    for j in `awk -F: '{print $1":"$2":"$4}' $INTRADO/etc/chksudoers.output`
    do
      SERVER=`echo $j | cut -f1 -d:`
      USER=`echo $j | cut -f2 -d:`
      ROOT=`echo $j | cut -f3 -d:`

      if [[ ${ROOT} = 'yes' ]]
      then
        OUTPUT=`grep "^${SERVER}:${USER}:" $INTRADO/etc/chksudo.dat`
        if [[ ! -z $OUTPUT ]]
        then
# only need the date
#wkkihiecerb21:escott:999999:30010101
          EXPIREDATE=`echo $OUTPUT | cut -f4 -d:`
          EXPIRE=`date --date="${EXPIREDATE}" +"%s"`
          if [[ $EPOCH -gt $EXPIRE ]]
          then
            echo -e "    ${RED}${USER} has privileged access which expired: ${EXPIREDATE}${RESET}" >> $LOG
          fi
        else
          echo -e "    ${RED}${USER} has undocumented privileged access${RESET}" >> $LOG
        fi
      fi
    done
  fi

# active employee check
# loop through the users on a system
# exclude users in the users.exclude file
# exclude locked users
# once passes, check gecos field for email
# check intrado.email for email
# report error if it doesn't exist.
# found == 0
  if [[ -f $INTRADO/etc/chksudo.dat ]]
  then
    echo -e "  ${GREEN}Active employee verification${RESET}" >> $LOG
    for j in `cut -f1 -d: /etc/passwd`
    do
      grep -qi "^${j}$" $INTRADO/etc/users.exclude
      if [[ $? = 1 ]]
      then
        LOCKED=`passwd -S ${j} | awk '{print $2}'`
        if [[ ! $LOCKED = 'LK' ]]
        then
          EMAIL=`grep "^${j}:" /etc/passwd | cut -f5 -d: | cut -f2 -d,`
          if [[ ! -z $EMAIL ]]
          then
            grep -qi "^${EMAIL}$" $INTRADO/etc/intrado.email
            if [[ $? = 1 ]]
            then
              echo -e "    ${RED}${j}/${EMAIL} was not found in the /opt/intrado/etc/intrado.email file and the user may have left the company.${RESET}" >> $LOG
            fi
          fi
        fi
      fi
    done
  fi

# Step 9: set unixsvc keys for access to the system; external to this check; skipped

# Step 1: vmware?
  if [[ -f /usr/bin/vmtoolsd ]] || [[ -f /usr/sbin/vmtoolsd ]]
  then
    echo -e "  ${GREEN}VMWare Agent is installed${RESET}" >> $LOG
    VMWARE=`ps -e | grep vmtoolsd`
    if [[ -z $VMWARE ]]
    then
      echo -e "    ${YELLOW}VMWare Agent is not running${RESET}" >> $LOG
    else
      echo -e "    ${GREEN}VMWare Agent is running${RESET}" >> $LOG
    fi
  else
    echo -e "  ${YELLOW}VMWare Agent is not installed${RESET}" >> $LOG
  fi

# Step 12: is rrdtool running?
  UPDATERRD=`ps -e | grep updaterrd`
  if [[ -z $UPDATERRD ]]
  then
    echo -e "  ${YELLOW}rrdtool is not configured or running${RESET}" >> $LOG
  fi

# Step 16: cfg2html installed?
  if [[ ! -d /opt/intrado/cfghtml ]]
  then
    echo -e "  ${YELLOW}cfg2html not installed${RESET}" >> $LOG
  else
    if [[ ! -f /opt/intrado/cfghtml/$HOSTNAME.html ]]
    then
      echo -e "  ${RED}cfg2html has not been run${RESET}" >> $LOG
    fi
  fi


# Step 17: copy the cfg2html file to the jumpstart server; update the jumpstart $ADMIN/bin/getcfg2html


# Step 18: was /opt/intrado/bin/intrado run?
  if [[ ! -f /opt/intrado/var/intrado.log ]]
  then
    echo -e "  ${YELLOW}The /opt/intrado/bin/intrado script hasn't run yet.${RESET}" >> $LOG
    CRON=`grep -v "^#" /var/spool/cron/root | grep "/opt/intrado/bin/intrado"`
    if [[ -z $CRON ]]
    then
      echo -e "  ${RED}Need to update root's cron${RESET}" >> $LOG
    fi
  fi


# Step 17: is there a link in /usr/bin/ksh from /bin/ksh?
  if [[ ! -f /usr/bin/ksh ]]
  then
    echo -e "  ${RED}Need to create a symbolic link between /bin/ksh and /usr/bin/ksh${RESET}" >> $LOG
  fi

# removeips=yes is causing a problem with non-system accounts. best is to just disable it on server.
# if without comments it's yes, report an error
# if blank and with comments it's yes, report an error
  if [[ -f /etc/systemd/logind.conf ]]
  then
# get the answer
    OUTPUT=`grep -v "^#" /etc/systemd/logind.conf | grep removeipc | cut -f2 -d=`
    if [[ $OUTPUT = 'yes' ]]
    then
      echo -e "  ${RED}Change RemoveIPC to no in /etc/systemd/logind.conf${RESET} systemctl restart systemd-logind.service" >> $LOG
    fi
    if [[ -z $OUTPUT ]]
    then
      OUTPUT=`grep -i removeipc /etc/systemd/logind.conf | cut -f2 -d=`
      if [[ $OUTPUT = 'yes' ]]
      then
        echo -e "  ${RED}Set RemoveIPC to no in /etc/systemd/logind.conf${RESET} systemctl restart systemd-logind.service" >> $LOG
      fi
    fi
  fi

# these checks are pulled from the auto-generated chkserver.input file.
  if [[ -f /opt/intrado/etc/chkserver.input ]]
  then

    for j in `egrep "^(${HOSTNAME}|\*):" /opt/intrado/etc/chkserver.input`
    do

      FIELD2=`echo $j | cut -f2 -d:`
      FIELD3=`echo $j | cut -f3 -d:`
      FIELD4=`echo $j | cut -f4 -d:`

      if [[ $FIELD2 = 'CPU' ]]
      then
        COUNT=`grep -c processor /proc/cpuinfo`
        if [[ $COUNT -ne $FIELD3 ]]
        then
          echo -e "  ${RED}System shows $COUNT CPUs where expected is $FIELD3 CPUs${RESET}" >> $LOG
        else
          echo -e "  ${GREEN}$COUNT CPUs as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Memory' ]]
      then
        COUNT=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 / 1024 + 1 ))
        if [[ $COUNT -ne $FIELD3 ]]
        then
          echo -e "  ${RED}System shows ${COUNT}G where expected is ${FIELD3}G${RESET}" >> $LOG
        else
          echo -e "  ${GREEN}${COUNT}G of Memory as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'IP' ]]
      then
        if [[ -f /sbin/ip ]]
        then
          IPADDR=/sbin/ip
        fi
        if [[ -f /usr/sbin/ip ]]
        then
          IPADDR=/usr/sbin/ip
        fi
        ${IPADDR} addr | grep -q " ${FIELD3}/"
        if [[ $? = 0 ]]
        then
          INTERFACE=`grep ${FIELD3}$ /etc/sysconfig/network-scripts/ifcfg-* | cut -f1 -d: | cut -f3 -d-`
          echo -e "  ${GREEN}IP $FIELD3 configured as ${INTERFACE}${RESET}" >> $LOG
          egrep -qi "onboot.*yes" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            echo -e "    ${GREEN}${INTERFACE} is configured to start on boot${RESET}" >> $LOG
          else
            echo -e "    ${RED}${INTERFACE} is not configured to start on boot${RESET}" >> $LOG
          fi
          grep -qi ${FIELD3} /etc/hosts
          if [[ $? = 1 ]]
          then
            echo -e "    ${YELLOW}${FIELD3} is not in /etc/hosts${RESET}" >> $LOG
          fi
          PRIVATE=`ipcalc -n ${FIELD4}/24 | cut -f2 -d=`
          if [[ ${PRIVATE} = '192.168.0.0' ]]
          then
            echo -e "    ${GREEN}Gateway ${FIELD4} is on a Private network${RESET}" >> $LOG
          else
            ping -c 1 ${FIELD4} > /dev/null 2>&1
            if [[ $? = 0 ]]
            then
              echo -e "    ${GREEN}Gateway ${FIELD4} accessible${RESET}" >> $LOG
            else
              echo -e "    ${RED}Gateway ${FIELD4} is not responding to ping${RESET}" >> $LOG
            fi
          fi
          GATEWAY="${GATEWAY} ${FIELD4}"
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
# check the interface file too
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network-scripts/ifcfg-${INTERFACE}:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
        else
          echo -e "  ${RED}Unable to locate ${FIELD3} in ip addr output${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Service' ]]
      then
        grep -q "^${FIELD3}:" /etc/passwd
        if [[ $? = 0 ]]
        then
          echo -e "  ${GREEN}Service Account ${FIELD3} exists${RESET}" >> $LOG
          PASSWORD=`chage -l ${FIELD3} | grep 'Password expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $PASSWORD = 'never   ' ]]
          then
            echo -e "    ${GREEN}Password doesn't expire${RESET}" >> $LOG
          else
            if [[ $PASSWORD = 'password must be changed' ]]
            then
              echo -e "    ${RED}Password expires date/message: ${PASSWORD}${RESET} You must change the service account password: ${FIELD3}" >> $LOG
            else
              echo -e "    ${RED}Password expires date/message: ${PASSWORD}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
            fi
          fi
          ACCOUNT=`chage -l ${FIELD3} | grep 'Account expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $ACCOUNT = 'never   ' ]]
          then
            echo -e "    ${GREEN}Account doesn't expire${RESET}" >> $LOG
          else
            echo -e "    ${RED}Account expires: ${ACCOUNT}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
          fi
        else
          echo -e "  ${RED}Unable to locate ${FIELD3} in /etc/passwd${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Group' ]]
      then
        grep -q "^${FIELD3}:" /etc/group
        if [[ $? = 0 ]]
        then
          echo -e "  ${GREEN}Group ${FIELD3} exists${RESET}" >> $LOG
        else
          echo -e "  ${RED}Unable to locate ${FIELD3} in /etc/group${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Sudoers' ]]
      then
        grep -q "^%${FIELD3}" /etc/sudoers
        if [[ $? = 0 ]]
        then
          echo -e "  ${GREEN}Sudoers group %${FIELD3} exists${RESET}" >> $LOG
        else
          echo -e "  ${YELLOW}Unable to locate %${FIELD3} in /etc/sudoers${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Openview' ]]
      then
        if [[ -d /opt/OV/bin ]]
        then
          echo -e "  ${GREEN}OpenView agent is installed${RESET}" >> $LOG
          OPENVIEW=`ps -e | grep ovcd`
          if [[ -z $OPENVIEW ]]
          then
            echo -e "    ${RED}OpenView agent is not running${RESET}" >> $LOG
          else
            echo -e "    ${GREEN}OpenView agent is running${RESET}" >> $LOG
          fi
        else
          echo -e "  ${RED}OpenView is not installed${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Netbackup' ]]
      then
        if [[ -f /usr/openv/netbackup/bp.conf ]]
        then
          echo -e "  ${GREEN}NetBackup is installed${RESET}" >> $LOG
          if [[ -f /etc/hosts.allow ]]
          then
            ALLOW=`grep bpcd: /etc/hosts.allow`
            if [[ -z $ALLOW ]]
            then
              echo -e "    ${YELLOW}/etc/hosts.allow is missing the daemons used by NetBackup${RESET}" >> $LOG
            fi
          else
            echo -e "    ${RED}/etc/hosts.allow doesn't exist${RESET}" >> $LOG
          fi
          NBLIST=`netstat -a | grep LISTEN | grep bpcd`
          if [[ -z $NBLIST ]]
          then
            echo -e "    ${RED}NetBackup is not running${RESET}" >> $LOG
          else
            echo -e "    ${GREEN}NetBackup is running${RESET}" >> $LOG
          fi
# check for last backup
#Backed Up         Expires       Files      KB     C Sched Type      Policy
#----------------  ---------- -------- ----------- - --------------- ------------
#07/15/2017 12:00  07/29/2017   138984    15491642 N Full Backup     BRHM_ECR_Servers

          if [[ -f  $INTRADO/etc/backups.output ]]
          then
            if [[ ! -s $INTRADO/etc/backups.output ]]
            then
              echo -e "    ${RED}${INTRADO}/etc/backups.output is empty.${RESET} Verify the servername in /usr/openv/netbackup/bp.conf" >> $LOG
            else
              OUTPUT=`egrep -v "(Backed Up|------------)" ${INTRADO}/etc/backups.output | head -1 | awk '{print $1}'`
              BUDATE=`date --date=$OUTPUT +"%s"`
              EXPIRED=$(( $BUDATE + $SEVEN ))
              TODAY=`date +"%s"`
              if [[ ${EXPIRED} -lt ${TODAY} ]]
              then
                echo -e "    ${RED}Last backup was more than 7 days ago (${OUTPUT})${RESET}" >> $LOG
              else
                echo -e "    ${GREEN}Last backup was ${OUTPUT}${RESET}" >> $LOG
              fi
            fi
          fi
        else
          echo -e "  ${RED}NetBackup is not installed${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Datapalette' ]]
      then
        if [[ -f /opt/datapalette/bin/datapal ]]
        then
          echo -e "  ${GREEN}Data Palette is installed${RESET}" >> $LOG
          DPPS=`ps -e | grep datapal`
          if [[ ! -z $DPPS ]]
          then
            echo -e "    ${GREEN}Data Palette is running${RESET}" >> $LOG
          else
            echo -e "    ${RED}Data Palette is not running${RESET}" >> $LOG
          fi
        else 
          echo -e "  ${RED}Data Palette is not installed${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'OpNet' ]]
      then
        if [[ -d /opt/Panorama ]]
        then
          echo -e "  ${GREEN}OpNet is installed${RESET}" >> $LOG
          APPI=`ps -e | grep Panorama`
          if [[ ! -z $APPI ]]
          then
            echo -e "    ${GREEN}OpNet is running${RESET}" >> $LOG
          else
            echo -e "    ${YELLOW}OpNet is not running${RESET}" >> $LOG
          fi
        else 
          echo -e "  ${RED}OpNet is not installed${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Centrify' ]]
      then
        CENTRIFY=`ps -e | grep adclient`
        if [[ ! -z $CENTRIFY ]]
        then
          echo -e "  ${GREEN}Centrify is installed${RESET}" >> $LOG
        else
          echo -e "  ${RED}Centrify is not installed${RESET}" >> $LOG
        fi
      fi

    done

# if gateway has been found (eg there are IP entries)
    if [[ ! -z ${GATEWAY} ]]
    then
      echo -e "  ${GREEN}Default gateway entry found${RESET}" >> $LOG
      if [[ ${GWFLAG} = 'yes' ]]
      then
        echo -e "$GWMSG" >> $LOG
      else
        echo -e "    ${RED}None of the configured interface gateways were found in /etc/sysconfig/network${RESET}" >> $LOG
      fi
    fi

    echo "" >> $LOG
  else 
    echo -e "${RED}chkserver.input file not found${RESET}" >> $LOG
  fi
fi

echo "External steps to be performed:" >> $LOG
echo "" >> $LOG
echo "1. Check service processor password" >> $LOG
echo "2. Have the unixsvc account ssh to this system to make sure it all works." >> $LOG
echo "3. Have the unixsvc account copy the cfghtml file: $HOSTNAME.html to the jumpstart server" >> $LOG

if [[ ! -z $1 ]]
then
  cat $LOG
fi

