#!/bin/ksh

# chkserver - Check the postinstall steps where possible
# Owner: Carl Schelin
# 2013/05/21
# Description: Run through the defined steps to quickly see what might need to be done
#   on a system to complete the installation.
# 2013/05/21 - CS - Fixed spelling on a couple of items. Added check of root's cron if intrado script hasn't been run yet
# 2017/05/22 - CS - Removed extra interfaces, count interfaces to see if routes need to be checked
# 2017/06/20 - CS - added chkserver.input validation steps.

PROGNAME="chkserver"
COUNT=0
OS=`uname`

echo ""
echo "================================"
echo "Running Postinstall System Check"
echo "================================"
echo ""

if [[ $OS = "Linux" ]]
then
  if [[ `id -u` -ne 0 ]]
  then
    echo "Due to the checks, this script must be run by root."
    exit 0
  fi

# Step 2: /etc hosts file
  HOSTNAME=`hostname|cut -f1 -d.`
  INHOSTS=`grep $HOSTNAME /etc/hosts`
  if [[ -z $INHOSTS ]]
  then
    echo "$HOSTNAME not in /etc/hosts"
  else
    echo "/etc/hosts:"
    echo "$INHOSTS"
  fi
  echo ""

# if we're here, the network stuff is likely set up so just show the various files to check the output.
# Step 3: /etc/sysconfig/network
  echo "/etc/sysconfig/network:"
  cat /etc/sysconfig/network
  echo ""

# Step 4: 
  echo "ifcfg files:"
  for i in `ls /etc/sysconfig/network-scripts/ifcfg* | grep -v -- '-lo' | grep -v -- '-none'`
  do
    ONBOOT=`grep "ONBOOT=yes" $i`
    if [[ ! -z $ONBOOT ]]
    then
      echo "$i:"
      cat $i
      echo ""
      COUNT=$(( $COUNT + 1 ))
    fi
  done

# Step 5: sudoers check
  if [[ -f /etc/sudoers ]]
  then
    SUDOERS=`grep $HOSTNAME /etc/sudoers`
    if [[ -z $SUDOERS ]]
    then
      echo "/etc/sudoers doesn't contain $HOSTNAME alias"
      echo ""
    fi
  else
    echo "/etc/sudoers not found"
    echo ""
  fi

# Step 10: check /etc/resolv.conf
  echo "/etc/resolv.conf:"
  cat /etc/resolv.conf
  echo ""

# Step 11: check routes
  if [[ $COUNT -gt 1 ]]
  then
    for i in `ls /etc/sysconfig/network-scripts/route-*`
    do
      echo $i
      cat $i
      echo ""
    done
  fi

# Step 6: root password changed? 
# check the password against the kickstart default
  ROOTDEF='$1$YDorwFsD$0/fIFtn7YZhMvZjAUZ.V./'
  ROOTPW=`grep "^root:" /etc/shadow | grep $ROOTDEF`
  if [[ ! -z $ROOTPW ]]
  then
    echo "Root password is still set to the default"
    echo ""
  fi

# Step 7: check service processor/iLOM password; external to this check; skipped

# Step 8: reset unixsvc account password
# check the password against the kickstart default
  UNIXDEF='$1$YDorwFsD$0/fIFtn7YZhMvZjAUZ.V./'
  UNIXPW=`grep "^unixsvc:" /etc/shadow | grep $UNIXDEF`
  if [[ ! -z $UNIXPW ]]
  then
    echo "UnixSvc account password is still set to the default"
    echo ""
  fi

# Step 9: set unixsvc keys for access to the system; external to this check; skipped

# Step 1: vmware?
  if [[ -f /usr/sbin/vmtoolsd ]]
  then
    echo "VMWare Agent is installed"
    VMWARE=`ps -e | grep vmtoolsd`
    if [[ -z $VMWARE ]]
    then
      echo "VMWare Agent is Running"
    fi
  else
    echo "VMWare Agent is not installed"
  fi
  echo ""

# Step 12: is rrdtool running?
  UPDATERRD=`ps -e | grep updaterrd`
  if [[ -z $UPDATERRD ]]
  then
    echo "rrdtool is not configured or running"
    echo ""
  fi

# Step 13: is Openview running?
  if [[ -d /opt/OV/bin ]]
  then
    echo "OpenView agent is installed"
    OPENVIEW=`ps -e | grep ovcd`
    if [[ -z $OPENVIEW ]]
    then
      echo "OpenView agent is not running"
    else
      echo "OpenView agent is running"
    fi
  else
    echo "OpenView is not installed"
  fi
  echo ""

# Step 14: is NetBackup installed? Check hosts.allow as well
  if [[ -f /usr/openv/netbackup/bp.conf ]]
  then
    echo "NetBackup is installed"
    if [[ -f /etc/hosts.allow ]]
    then
      ALLOW=`grep bpcd: /etc/hosts.allow`
      if [[ -z $ALLOW ]]
      then
        echo "/etc/hosts.allow is missing the daemons used by NetBackup"
      fi
    else
      echo "/etc/hosts.allow doesn't exist"
    fi
    NBLIST=`netstat -a | grep LISTEN | grep bpcd`
    if [[ -z $NBLIST ]]
    then
      echo "NetBackup is not running"
    else
      echo "NetBackup is running"
    fi
  else
    echo "NetBackup is not installed"
  fi
  echo ""


# Step 15: is Datapal installed?
  if [[ -f /opt/datapalette/bin/datapal ]]
  then
    DPPS=`ps -e | grep datapal`
    if [[ ! -z $DPPS ]]
    then
      echo "Data Palette is installed and running"
    else
      echo "Data Palette is installed but is not running"
    fi
  else 
    echo "Data Palette is not installed on this system"
  fi
  echo ""


# Step 16: cfg2html installed?
  if [[ ! -d /opt/intrado/cfghtml ]]
  then
    echo "cfg2html not installed"
    echo ""
  else
    if [[ ! -f /opt/intrado/cfghtml/$HOSTNAME.html ]]
    then
      echo "cfg2html has not been run"
      echo ""
    fi
  fi


# Step 17: copy the cfg2html file to the jumpstart server; update the jumpstart $ADMIN/bin/getcfg2html


# Step 18: was /opt/intrado/bin/intrado run?
  if [[ ! -f /opt/intrado/var/intrado.log ]]
  then
    echo "The /opt/intrado/bin/intrado script hasn't run yet."
    CRON=`grep -v "^#" /var/spool/cron/root | grep "/opt/intrado/bin/intrado"`
    if [[ -z $CRON ]]
    then
      echo "Need to update root's cron"
    fi
    echo ""
  fi


# Step 16: is Centrify installed
  CENTRIFY=`ps -e | grep adclient`
  if [[ -z $CENTRIFY ]]
  then
    echo "Centrify is not installed"
    echo ""
  fi


# Step 17: is there a link in /usr/bin/ksh from /bin/ksh?
  if [[ ! -f /usr/bin/ksh ]]
  then
    echo "Need to create a symbolic link between /bin/ksh and /usr/bin/ksh"
    echo ""
  fi

  if [[ -f /opt/intrado/etc/chkserver.input ]]
  then

    echo ""
    echo "Checking chkserver.input file for items to verify:"

    for j in `egrep "^(${HOSTNAME}|\*):" /opt/intrado/etc/chkserver.input`
    do

      FIELD2=`echo $j | cut -f2 -d:`
      FIELD3=`echo $j | cut -f3 -d:`
      FIELD4=`echo $j | cut -f4 -d:`

      if [[ $FIELD2 = 'CPU' ]]
      then
        COUNT=`grep -c processor /proc/cpuinfo`
        if [[ $COUNT -ne $FIELD3 ]]
        then
          echo "  System shows $COUNT CPUs where expected is $FIELD3 CPUs"
        else
          echo "  $COUNT CPUs as expected"
        fi
      fi
    
      if [[ $FIELD2 = 'Memory' ]]
      then
        COUNT=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 / 1024 + 1 ))
        if [[ $COUNT -ne $FIELD3 ]]
        then
          echo "  System shows $COUNT Memory where expected is $FIELD3 Memory"
        else
          echo "  ${COUNT}G of Memory as expected"
        fi
      fi
    
      if [[ $FIELD2 = 'IP' ]]
      then
        ip addr | grep -q " ${FIELD3}/"
        if [[ $? = 0 ]]
        then
          echo "  IP $FIELD3 configured"
          ping -c 2 ${FIELD4} > /dev/null 2>&1
          if [[ $? = 0 ]]
          then
            echo "  Gateway ${FIELD4} accessible"
          else
            echo "  Gateway ${FIELD4} is not responding to ping"
          fi
        else
          echo "  Unable to locate ${FIELD3} in ip addr output"
        fi
      fi

      if [[ $FIELD2 = 'Service' ]]
      then
        grep -q "^${FIELD3}:" /etc/passwd
        if [[ $? = 0 ]]
        then
          echo "  Service Account ${FIELD3} exists"
          PASSWORD=`chage -l ${FIELD3} | grep 'Password expires' | awk '{print $4" "$5" "$6}'`
          if [[ $PASSWORD = 'never' ]]
          then
            echo "    Password doesn't expire"
          else
            echo "    Password expires: $PASSWORD"
          fi
          ACCOUNT=`chage -l ${FIELD3} | grep 'Account expires' | awk '{print $4" "$5" "$6}'`
          if [[ $ACCOUNT = 'never' ]]
          then
            echo "    Account doesn't expire"
          else
            echo "    Account expires: $ACCOUNT"
          fi
        else
          echo "  Unable to locate ${FIELD3} in /etc/passwd"
        fi
      fi
    
      if [[ $FIELD2 = 'Group' ]]
      then
        grep -q "^${FIELD3}:" /etc/group
        if [[ $? = 0 ]]
        then
          echo "  Group ${FIELD3} exists"
        else
          echo "  Unable to locate ${FIELD3} in /etc/group"
        fi
      fi
    
      if [[ $FIELD2 = 'Sudoers' ]]
      then
        grep -q "^%${FIELD3}" /etc/sudoers
        if [[ $? = 0 ]]
        then
          echo "  Sudoers group %${FIELD3} exists"
        else
          echo "  Unable to locate %${FIELD3} in /etc/sudoers"
        fi
      fi

    done

    echo ""
  fi
fi

echo "External steps to be performed:"
echo ""
echo "1. Check service processor password"
echo "2. Have the unixsvc account ssh to this system to make sure it all works."
echo "3. Have the unixsvc account copy the cfghtml file: $HOSTNAME.html to the jumpstart server"

