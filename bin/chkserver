#!/usr/bin/ksh

# chkserver - Check the postinstall steps where possible
# Owner: Carl Schelin
# 2013/05/21
# Description: Run through the defined steps to quickly see what might need to be done
#   on a system to complete the installation.
# 2013/05/21 - CS - Fixed spelling on a couple of items. Added check of root's cron if intrado script hasn't been run yet
# 2017/02/21 - CS - Checked in to RCS
# 2017/05/22 - CS - Removed extra interfaces, count interfaces to see if routes need to be checked
# 2017/06/20 - CS - added chkserver.input validation steps.
# 2017/06/22 - CS - Updated to add color and add more things to check
# 2017/06/22 - CS - Updated to check for vmtools installation
# 2017/06/22 - CS - Added color and clean up some of the messages
# 2017/06/26 - CS - write out to .output file like all the others.
# 2017/06/26 - CS - Updated to manage gateways better
# 2017/06/27 - CS - Updated to check all admin default passwords, not just unixsvc
# 2017/06/27 - CS - Updated to show root in the listing
# 2017/06/27 - CS - Updated to fine the right path to the ip command
# 2017/06/29 - CS - Updated the check with grep
# 2017/06/30 - CS - Added subscription manager check, added group membership check
# 2017/06/30 - CS - Fixed typo
# 2017/06/30 - CS - Updated with the correct info
# 2017/06/30 - CS - Remove extra quotes from check
# 2017/06/30 - CS - Fixed the output of grep
# 2017/07/03 - CS - Updated to check for the RemoveIPC value (set to yes; warning)
# 2017/07/03 - CS - Updated to manage colors better (warning, error, and good)
# 2017/07/05 - CS - Updated to fix messages
# 2017/07/05 - CS - Updated to add a security check
# 2017/07/05 - CS - Fixed log info. Fixed data file parse. Updated to check the interface file for Gateway info in addition to the network file
# 2017/07/05 - CS - Updated to change the title and to add the email check for user access
# 2017/07/05 - CS - Updated text
# 2017/07/05 - CS - Updated to add every GATEWAY to the output
# 2017/07/06 - CS - Fix grep output (was displaying emails; add -q to quiet) also added -i to ignore case
# 2017/07/06 - CS - Check for locked account in order to filter messages out
# 2017/07/06 - CS - Add check for Mail Server access
# 2017/07/06 - CS - Added OpNet check
# 2017/07/06 - CS - Update message display
# 2017/07/06 - CS - Add a trailing $ to the IP check to keep from multiple hits due to single digit host IPs
# 2017/07/06 - CS - Updated to add a message for the email check
# 2017/07/10 - CS - Update warning messages with appropriate color
# 2017/07/10 - CS - Added check for access to incojs01
# 2017/07/10 - CS - Added check for time
# 2017/07/11 - CS - Removed private networks from gateway ping test
# 2017/07/11 - CS - updated to ping servers before checking functionality
# 2017/07/13 - CS - Add check of the route table. Just parrot the routetable.output file
# 2017/07/17 - CS - Backup check
# 2017/07/19 - CS - Added user doesn't exist error for users who may not be in the right group
# 2017/07/20 - CS - Moved further app tests from inside the chkserver.input file and out where it executes if it finds the agent
# 2017/07/21 - CS - Added a specific check for bits for nginx
# 2017/07/24 - CS - Added bits for Solaris (need to pull out common bits to functions.
# 2017/07/25 - CS - Updated to properly locate Panorama
# 2017/07/25 - CS - Updated to block out nc checks if netcat isn't found.
# 2017/07/25 - CS - Added status messages for nc to identify when it's stopped.
# 2017/07/25 - CS - Put in more status messages for ping to show where slowdowns are.
# 2017/07/26 - CS - Moving code blocks into functions and updating for different versions where appropriate
# 2017/07/26 - CS - Updated time server check to include seeing if the time servers can sync
# 2017/07/27 - CS - Fixed first/New opnet server access port (443)
# 2017/07/27 - CS - Updated to support HP-UX
# 2017/07/27 - CS - Switch to ksh (need to fix error output)

PROGNAME="chkserver"
COUNT=0
GATEWAY=''
GWFLAG='no'
GWMSG=''
OS=`uname`
GREEN="GREEN(32m): "
GREEN="\033[32m"
RED="RED(31m): "
RED="\033[31m"
YELLOW="YELLOW(33m): "
YELLOW="\033[33m"
RESET=""
RESET="\033[0m"
INTRADO=/opt/intrado
LOG=$INTRADO/etc/chkserver.output
SEVEN=$(( 86400 * 7 ))
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/opt/csw/bin; export PATH

if [[ -f $LOG ]]
then
  rm $LOG
fi

# the sun nc doesn't handle -w wait flag well so we'll blank it if something's passed on the command line
if [[ $OS = 'SunOS' ]] && [[ ! -z $1 ]]
then
  NETCAT=''
else
  NETCAT='nc'
fi


######################
### Return the epoch
######################

#Get date values of the date to be converted for second, minute, hour, day, month, year.
#day=(year*365)+(year/4)-(year/100)+(year/400)+(month*306001/10000)+day
#days_since_epoch=day-719591 (which is Jan 1 1970)
#seconds_since_epoch=(days_since_epoch*86400)+(hour*3600)+(minute*60)+seconds

epoch() {
  EP_YEAR=$1
  EP_MONTH=$2
  EP_DAY=$3

  if [[ $OS = 'SunOS' ]]
  then
    NUMBER_DAYS=$(( $EP_YEAR * 365 ))
    LEAP_YEARS=$(( $EP_YEAR / 4 ))
    LEAP_CENTURY=$(( $EP_YEAR / 100 ))
    LEAP_CENTURIES=$(( $EP_YEAR / 400 ))
    DAYS_IN_MONTH=$(( $EP_MONTH * 306001 / 10000 ))
    EXPIRE=$(( ( $NUMBER_DAYS + $LEAP_YEARS - $LEAP_CENTURY + $LEAP_CENTURIES + $DAYS_IN_MONTH + $EP_DAY ) * 86400 ))
  fi

  echo $EXPIRE
}

EPYEAR=`date +"%Y"`
EPMONTH=`date +"%m"`
EPDAY=`date +"%d"`
EPOCH=`epoch $EPYEAR $EPMONTH $EPDAY`


###################################
### Functions:
###   Note that functions are in alphabetical order where defined here but in logical, checkbox order in the OS specific check areas
###################################


######################
### Check to make sure employees haven't departed (accounts need to be locked)
######################

check_active_employees() {
# active employee check
# loop through the users on a system
# exclude users in the users.exclude file
# exclude locked users
# once passes, check gecos field for email
# check intrado.email for email
# report error if it doesn't exist.
# found == 0
  if [[ -f $INTRADO/etc/chksudo.dat ]]
  then
    printf "%b\n" "  ${GREEN}Active employee verification${RESET}" >> $LOG
    for j in `cut -f1 -d: /etc/passwd`
    do
      grep -i "^${j}$" $INTRADO/etc/users.exclude > /dev/null
      if [[ $? = 1 ]]
      then
        if [[ $OS = 'Linux' ]]
        then
          LOCKED=`passwd -S ${j} | awk '{print $2}'`
        fi
        if [[ $OS = 'SunOS' ]]
        then
          LOCKED=`passwd -s ${j} | awk '{print $2}'`
        fi
        if [[ ! $LOCKED = 'LK' ]]
        then
          EMAIL=`grep "^${j}:" /etc/passwd | cut -f5 -d: | cut -f2 -d,`
          if [[ ! -z $EMAIL ]]
          then
            grep -i "^${EMAIL}$" $INTRADO/etc/intrado.email > /dev/null
            if [[ $? = 1 ]]
            then
              printf "%b\n" "    ${RED}${j}/${EMAIL} was not found in the /opt/intrado/etc/intrado.email file and the user may have left the company.${RESET}" >> $LOG
            fi
          fi
        fi
      fi
    done
  fi
}


######################
### Check Centrify if installed
######################

check_centrify() {
  if [[ -f /usr/sbin/adclient ]]
  then
    printf "%b\n" "  ${GREEN}Centrify is installed${RESET}" >> $LOG
    CENTRIFY=`ps -e | grep adclient`
    if [[ ! -z $CENTRIFY ]]
    then
      printf "%b\n" "    ${GREEN}Centrify is running${RESET}" >> $LOG
      /usr/bin/adinfo > /dev/null
      if [[ $? = 0 ]]
      then
#[root@cofmcc1 bin]# adinfo
#Local host name:   cofmcc1
#Joined to domain:  unix.intrado.pri
#Joined as:         cofmcc1.unix.intrado.pri
#Pre-win2K name:    cofmcc1
#Current DC:        lmv08-udc01.unix.intrado.pri
#Preferred site:    LGMT-CO
#Zone:              unix.intrado.pri/Unix/Zones/FMCC
#Last password set: 2017-07-14 15:47:36 MDT
#CentrifyDC mode:   connected
#Licensed Features: Enabled
        ADDOMAIN=`/usr/bin/adinfo | grep 'Joined to domain:' | awk '{print $4}'`
        printf "%b\n" "    ${GREEN}Centrify is connect to ${ADDOMAIN}${RESET}" >> $LOG
      fi
#Linux:cschelin@infltx10$ adinfo
#Not joined to any domain
#Licensed Features: Enabled
#Linux:cschelin@infltx10$ echo $?
#10
      /usr/bin/adinfo > /dev/null
      if [[ $? = 10 ]]
      then
        printf "%b\n" "    ${RED}Centrify is not connected${RESET}" >> $LOG
      fi
    else
      printf "%b\n" "    ${YELLOW}Centrify is not running${RESET}" >> $LOG
    fi
  fi
}


######################
### Check the status of cfg2html
######################

check_cfg2html() {
  if [[ ! -d /opt/intrado/cfghtml ]]
  then
    printf "%b\n" "  ${YELLOW}cfg2html not installed${RESET}" >> $LOG
  else
    if [[ ! -f /opt/intrado/cfghtml/$HOSTNAME.html ]]
    then
      printf "%b\n" "  ${RED}cfg2html has not been run${RESET}" >> $LOG
    fi
  fi
}


######################
### Check Data Palette if installed
######################

check_data_palette() {
  if [[ -f /opt/datapalette/bin/datapal ]]
  then
    printf "%b\n" "  ${GREEN}Data Palette is installed${RESET}" >> $LOG
    DPPS=`ps -e | grep datapal`
    if [[ ! -z $DPPS ]]
    then
      printf "%b\n" "    ${GREEN}Data Palette is running${RESET}" >> $LOG
    else
      printf "%b\n" "    ${RED}Data Palette is not running${RESET}" >> $LOG
    fi
    echo "ping check of data palette nerve center: 10.100.128.3"
    ping -c 1 10.100.128.3 > /dev/null 2>&1
    if [[ $? = 0 ]]
    then
      printf "%b\n" "    ${GREEN}Data Palette Nerve Center is pingable${RESET}" >> $LOG
      if [[ ! -z ${NETCAT} ]]
      then
        echo "nc check of Data Palette Nerve Center Server"
        echo "quit" | ${NETCAT} -w 2 -vn 10.100.128.3 8080 > /dev/null 2>&1
        if [[ $? = 0 ]]
        then
          printf "%b\n" "    ${GREEN}Data Palette Nerve Center (10.100.128.3:8080) is accessible${RESET}" >> $LOG
        else
          printf "%b\n" "    ${RED}Data Palette Nerve Center (10.100.128.3:8080) is not accessible${RESET}" >> $LOG
        fi
      fi
    else
      printf "%b\n" "    ${RED}Data Palette Nerve Center is not pingable${RESET}" >> $LOG
    fi
  fi
}


######################
### Check default installation passwords
######################

check_default_passwords() {
# check the password against the kickstart default
# leave root and all the admins in the listing, even the ones that are gone, as they may still be set to default
  printf "%b\n" "  ${GREEN}Account password verification${RESET}" >> $LOG
  for j in root cschelin kzupan jnoyes tcooper escott mchahud jschroet jmetz ppietras unixsvc
  do
    UNIXDEF='$1$YDorwFsD$0/fIFtn7YZhMvZjAUZ.V./'
    UNIXPW=`grep "^${j}:" /etc/shadow | grep ":${UNIXDEF}:"`
    if [[ ! -z $UNIXPW ]]
    then
      printf "%b\n" "    ${RED}${j} account password is still set to the default${RESET}" >> $LOG
    fi
  done
}


######################
### Check access to the mail server
######################

check_email() {
  printf "%b\n" "  ${GREEN}Checking mail server (10.100.104.6:25)${RESET}" >> $LOG
  echo "ping check of mail server: 10.100.104.6"
  ping -c 1 10.100.104.6 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    printf "%b\n" "    ${GREEN}Email server is pingable${RESET}" >> $LOG
    if [[ ! -z ${NETCAT} ]]
    then
      echo "nc check of Mail Server"
      echo "quit" | ${NETCAT} -w 2 -vn 10.100.104.6 25 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}Email server (10.100.104.6:25) is accessible${RESET}" >> $LOG
      else
        printf "%b\n" "    ${RED}Email server (10.100.104.6:25) is not accessible${RESET}" >> $LOG
      fi
    fi
  else
    printf "%b\n" "    ${RED}Email server is not pingable${RESET}" >> $LOG
  fi
}


######################
### Check group memberships
######################

check_group_membership() {
  printf "%b\n" "  ${GREEN}Group membership verification${RESET}" >> $LOG
  for i in `cut -f1 -d: /etc/group`
  do
    grep -i "^${i}:" $INTRADO/etc/group.master > /dev/null
    if [[ $? = 0 ]]
    then
# found the group in the group.master file. Now check all users in group.master list against /etc/group list and throw an error if not found
      for j in `grep "^${i}:" $INTRADO/etc/group.master | cut -f2 -d: | sed -e "s/,/ /g"`
      do
        egrep -i "^${j}:" /etc/passwd > /dev/null
        if [[ $? = 1 ]]
        then
          printf "%b\n" "    ${RED}${j} does not have a login on this system${RESET}" >> $LOG
          egrep -i "^${i}:.*(:|,)${j}(,|$)" /etc/group > /dev/null
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${RED}${j} was not found in the ${i} group in /etc/group${RESET}" >> $LOG
          fi
        fi
      done
# now check all users in /etc/group against group.master and throw an error if found
      for j in `grep "^${i}:" /etc/group | cut -f4 -d: | sed -e "s/,/ /g"`
      do
        egrep -i "^${i}.*(:|,)${j}(,|$)" $INTRADO/etc/group.master > /dev/null
        if [[ $? = 1 ]]
        then
          printf "%b\n" "    ${RED}${j} was found in the ${i} group in /etc/group but not in group.master${RESET}" >> $LOG
        fi
      done
    fi
  done
}


######################
### Check the hostname
######################

check_hostname() {
  HOSTNAME=`hostname|cut -f1 -d.`
  grep -i ${HOSTNAME} /etc/hosts > /dev/null
  if [[ $? = 0 ]]
  then
    printf "%b\n" "  ${GREEN}${HOSTNAME} is in /etc/hosts${RESET}" >> $LOG
  else
    printf "%b\n" "  ${YELLOW}${HOSTNAME} not in /etc/hosts${RESET}" >> $LOG
  fi
}


######################
### Check access to the Jumpstart web site
######################

check_jumpstart() {
  printf "%b\n" "  ${GREEN}Checking jumpstart server (10.100.78.143:80)${RESET}" >> $LOG
  echo "ping check of jumpstart server: 10.100.78.143"
  ping -c 1 10.100.78.143 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    printf "%b\n" "    ${GREEN}Jumpstart server is pingable${RESET}" >> $LOG
    if [[ ! -z ${NETCAT} ]]
    then
      echo "nc check of Jumpstart Server"
      echo "\n\n" | ${NETCAT} -w 2 -vn 10.100.78.143 80 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}Jumpstart web server is accessible${RESET}" >> $LOG
      else
        printf "%b\n" "    ${RED}Jumpstart web server is not accessible${RESET}" >> $LOG
      fi
    fi
  else
    printf "%b\n" "    ${RED}Jumpstart server is not pingable${RESET}" >> $LOG
  fi
}


######################
### Check the status of Netbackup
######################

check_netbackup() {
  if [[ -f /usr/openv/netbackup/bp.conf ]]
  then
    printf "%b\n" "  ${GREEN}NetBackup is installed${RESET}" >> $LOG
    if [[ -f /etc/hosts.allow ]]
    then
      ALLOW=`grep bpcd: /etc/hosts.allow`
      if [[ -z $ALLOW ]]
      then
        printf "%b\n" "    ${YELLOW}/etc/hosts.allow is missing the daemons used by NetBackup${RESET}" >> $LOG
      fi
    else
      printf "%b\n" "    ${RED}/etc/hosts.allow doesn't exist${RESET}" >> $LOG
    fi
    NBLIST=`netstat -a | grep LISTEN | grep bpcd`
    if [[ -z $NBLIST ]]
    then
      printf "%b\n" "    ${RED}NetBackup is not running${RESET}" >> $LOG
    else
      printf "%b\n" "    ${GREEN}NetBackup is running${RESET}" >> $LOG
    fi
# check for last backup
#Backed Up         Expires       Files      KB     C Sched Type      Policy
#----------------  ---------- -------- ----------- - --------------- ------------
#07/15/2017 12:00  07/29/2017   138984    15491642 N Full Backup     BRHM_ECR_Servers

    if [[ -f  $INTRADO/etc/backups.output ]]
    then
      if [[ ! -s $INTRADO/etc/backups.output ]]
      then
        printf "%b\n"m"    ${RED}${INTRADO}/etc/backups.output is empty.${RESET} Verify the servername in /usr/openv/netbackup/bp.conf" >> $LOG
      else
        OUTPUT=`egrep -v "(Backed Up|------------)" ${INTRADO}/etc/backups.output | head -1 | awk '{print $1}'`
        if [[ $OS = 'Linux' ]]
        then
          BUDATE=`date --date=$OUTPUT +"%s"`
        else
          BUYEAR=`echo $OUTPUT | cut -f1 -d/`
          BUMONTH=`echo $OUTPUT | cut -f2 -d/`
          BUDAY=`echo $OUTPUT | cut -f3 -d/`
          BUDATE=`epoch $BUYEAR $BUMONTH $BUDAY`
        fi
        EXPIRED=$(( $BUDATE + $SEVEN ))
        if [[ ${EPOCH} -gt ${EXPIRED} ]]
        then
          printf "%b\n" "    ${RED}Last backup was more than 7 days ago (${OUTPUT})${RESET}" >> $LOG
        else
          printf "%b\n" "    ${GREEN}Last backup was ${OUTPUT}${RESET}" >> $LOG
        fi
      fi
    fi
  fi
}


######################
### Check the status of Openview
######################

check_openview() {
# if Openview was found, check to see if it's running
  if [[ -d /opt/OV/bin ]]
  then
    printf "%b\n" "  ${GREEN}OpenView agent is installed${RESET}" >> $LOG
    OPENVIEW=`ps -e | grep ovcd`
    if [[ -z $OPENVIEW ]]
    then
      printf "%b\n" "    ${RED}OpenView agent is not running${RESET}" >> $LOG
    else
      printf "%b\n" "    ${GREEN}OpenView agent is running${RESET}" >> $LOG
      ping -c 1 10.109.243.19 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}Longmont Openview VIP is pingable${RESET}" >> $LOG
        if [[ ! -z ${NETCAT} ]]
        then
# check for access to the vips; Longmont and Miami
#10.109.243.19	lnmtcodcom1vip.scc911.com	lnmtcodcom1vip
          echo "nc check of Longmont Openview Server"
          echo "" | ${NETCAT} -w 2 -vn 10.109.243.19 383 > /dev/null 2>&1
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${GREEN}Longmont VIP is accessible${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}Longmont VIP is not accessible${RESET}" >> $LOG
          fi
        fi
      else
        printf "%b\n" "    ${RED}Longmont Openview VIP is not pingable${RESET}" >> $LOG
      fi

      ping -c 1 10.109.226.19 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n"."    ${GREEN}Miami Openview VIP is pingable${RESET}" >> $LOG
        if [[ ! -z ${NETCAT} ]]
        then
# check for access to the vips; Longmont and Miami
#10.109.226.19	miamfldcom1vip.scc911.com	miamfldcom1vip
          echo "nc check of Miami Openview Server"
          echo "" | ${NETCAT} -w 2 -vn 10.109.226.19 383 > /dev/null 2>&1
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${GREEN}Miami VIP is accessible${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}Miami VIP is not accessible${RESET}" >> $LOG
          fi
        fi
      else
        printf "%b\n" "    ${RED}Miami Openview VIP is not pingable${RESET}" >> $LOG
      fi
    fi
  fi
}


######################
### Check Opnet if found
######################

check_opnet() {
  if [[ -d /opt/Panorama ]]
  then
    printf "%b\n" "  ${GREEN}OpNet is installed${RESET}" >> $LOG
# Panorama starts as /bin/sh /opt/Panorama/....
    APPI=`ps -ef | grep Panorama`
    if [[ ! -z $APPI ]]
    then
      printf "%b\n" "    ${GREEN}OpNet is running${RESET}" >> $LOG
    else
      printf "%b\n" "    ${YELLOW}OpNet is not running${RESET}" >> $LOG
    fi
    if [[ $OS = 'Linux' ]]
    then
      OUTPUT=`chkconfig --list appinternals | grep ":on"`
      if [[ -z $OUTPUT ]]
      then
        printf "%b\n" "    ${YELLOW}OpNet is not configured to start on boot${RESET}" >> $LOG
      else
        printf "%b\n" "    ${GREEN}OpNet is configured to start on boot${RESET}" >> $LOG
      fi
    fi
    if [[ ! -z ${NETCAT} ]]
    then
      echo "nc check of OpNet Server"
      echo "quit" | ${NETCAT} -w 2 -vn 10.32.10.1 443 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}OpNet Server (10.32.10.1:443) is accessible${RESET}" >> $LOG
      else
        printf "%b\n" "    ${YELLOW}OpNet Server (10.32.10.1:443) is not accessible${RESET}" >> $LOG
      fi
      echo "nc check of OpNet Server"
      echo "quit" | ${NETCAT} -w 2 -vn 10.100.4.63 19090 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}OpNet Server (10.100.4.63:19090) is accessible${RESET}" >> $LOG
      else
        printf "%b\n" "    ${YELLOW}OpNet Server (10.100.4.63:19090) is not accessible${RESET}" >> $LOG
      fi
      echo "nc check of OpNet Server"
      echo "quit" | ${NETCAT} -w 2 -vn 10.100.4.64 19090 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}OpNet Server (10.100.4.64:19090) is accessible${RESET}" >> $LOG
      else
        printf "%b\n" "    ${YELLOW}OpNet Server (10.100.4.64:19090) is not accessible${RESET}" >> $LOG
      fi
    fi
  fi 
}


######################
### Check to see if users who have privileged access have expired or shouldn't have it
######################

check_privileged_access() {
# see if the user is in the chksudoers.dat file. This indicates the user has privileged access.
# error if the user is not in the chksudo.dat file.
# error if the date is older than the expiration date.
#lnmt1cuomrcs1:cschelin:Carl Schelin,carl.schelin@intrado.com:yes:Expired
  if [[ -f $INTRADO/etc/chksudo.dat ]]
  then
    printf "%b\n" "  ${GREEN}Privileged access review${RESET}" >> $LOG
    for j in `awk -F: '{print $1":"$2":"$4}' $INTRADO/etc/chksudoers.output`
    do
      SERVER=`echo $j | cut -f1 -d:`
      USER=`echo $j | cut -f2 -d:`
      ROOT=`echo $j | cut -f3 -d:`

      if [[ ${ROOT} = 'yes' ]]
      then
        OUTPUT=`grep "^${SERVER}:${USER}:" $INTRADO/etc/chksudo.dat`
        if [[ ! -z $OUTPUT ]]
        then
# only need the date
#wkkihiecerb21:escott:999999:30010101
          EXPIREDATE=`echo $OUTPUT | cut -f4 -d:`
          if [[ $OS = 'Linux' ]]
          then
            EXPIRE=`date --date="${EXPIREDATE}" +"%s"`
          else
            EXYEAR=`echo $EXPIREDATE | cut -c1-4`
            EXMONTH=`echo $EXPIREDATE | cut -c5-6`
            EXDAY=`echo $EXPIREDATE | cut -c7-8`
            EXPIRE=`epoch $EXYEAR $EXMONTH $EXDAY`
          fi
          if [[ ${EPOCH} -gt ${EXPIRE} ]]
          then
            printf "%b\n" "    ${RED}${USER} has privileged access which expired: ${EXPIREDATE}${RESET}" >> $LOG
          fi
        else
          printf "%b\n" "    ${RED}${USER} has undocumented privileged access${RESET}" >> $LOG
        fi
      fi
    done
  fi
}


######################
### Check the status of subscriptions for Red Hat servers only (so not an OS check)
######################

check_redhat_subscription() {
  if [[ -f /etc/redhat-release ]]
  then
    if [[ ! -f /usr/bin/subscription-manager ]]
    then
      printf "%b\n" "  ${RED}Subscription-Manager not installed${RESET}" >> $LOG
    else
      printf "%b\n" "  ${GREEN}Subscription-Manager is installed${RESET}" >> $LOG
      STATUS=`/usr/bin/subscription-manager list | grep "^Status:" | awk '{print $2}'`
      if [[ $STATUS = 'Unknown' ]]
      then
        printf "%b\n" "    ${RED}System is not subscribed to Satellite${RESET}" >> $LOG
      fi
      if [[ $STATUS = 'No' ]]
      then
        printf "%b\n" "    ${RED}System is not subscribed to Satellite${RESET}" >> $LOG
      fi
      if [[ $STATUS = 'Subscribed' ]]
      then
        printf "%b\n" "    ${GREEN}System is subscribed to Satellite${RESET}" >> $LOG
      fi
      if [[ $STATUS = 'Expired' ]]
      then
        printf "%b\n" "    ${YELLOW}System subscription has expired${RESET}" >> $LOG
      fi
    fi
  fi
}


######################
### Check the status of RemoveIPS on Red Hat systems
######################

check_removeips() {
  if [[ -f /etc/redhat-release ]]
  then
# removeips=yes is causing a problem with non-system accounts. best is to just disable it on server.
# if without comments it's yes, report an error
# if blank and with comments it's yes, report an error
    if [[ -f /etc/systemd/logind.conf ]]
    then
# get the answer
      OUTPUT=`grep -v "^#" /etc/systemd/logind.conf | grep removeipc | cut -f2 -d=`
      if [[ $OUTPUT = 'yes' ]]
      then
        printf "%b\n" "  ${RED}Change RemoveIPC to no in /etc/systemd/logind.conf${RESET} systemctl restart systemd-logind.service" >> $LOG
      fi
      if [[ -z $OUTPUT ]]
      then
        OUTPUT=`grep -i removeipc /etc/systemd/logind.conf | cut -f2 -d=`
        if [[ $OUTPUT = 'yes' ]]
        then
          printf "%b\n" "  ${RED}Set RemoveIPC to no in /etc/systemd/logind.conf${RESET} systemctl restart systemd-logind.service" >> $LOG
        fi
      fi
    fi
  fi
}


######################
### Check the resolv.conf nameserver entries
######################

check_resolver() {
  if [[ -f /etc/resolv.conf ]]
  then
    COUNT=`grep -v "^#" /etc/resolv.conf | grep -c nameserver`
    if [[ $COUNT = 0 ]]
    then
      printf "%b\n" "  ${RED}No nameserver entries found in /etc/resolv.conf${RESET}" >> $LOG
    else
      for i in `grep -v "^#" /etc/resolv.conf | grep nameserver | awk '{print $2}'`
      do
        printf "%b\n" "  ${GREEN}Found nameserver ${i} in /etc/resolv.conf${RESET}" >> $LOG
        echo "ping check of nameserver: ${i}"
        ping -c 1 ${i} > /dev/null 2>&1
        if [[ $? = 0 ]]
        then
          printf "%b\n" "    ${GREEN}Nameserver ${i} pingable${RESET}" >> $LOG
          OUTPUT=`nslookup incojs01 ${i} | grep "Address: 10.100.78.143"`
          if [[ -z $OUTPUT ]]
          then
            printf "%b\n" "    ${RED}Unable to resolve incojs01${RESET}" >> $LOG
          else
            printf "%b\n" "    ${GREEN}Resolved incojs01${RESET}" >> $LOG
          fi
        else
          printf "%b\n" "    ${RED}Nameserver ${i} is not pingable${RESET}" >> $LOG
        fi
      done
    fi
    if [[ $COUNT -gt 3 ]]
    then
      printf "%b\n" "  ${RED}More than 3 nameserver entries found in /etc/resolv.conf${RESET}" >> $LOG
    fi
  fi
}


######################
### Check the status of the routing tables
######################

check_routetable() {
  if [[ ! -f $INTRADO/etc/routetable.output ]]
  then
    $INTRADO/bin/chkroutetable
  fi
  if [[ -s $INTRADO/etc/routetable.output ]]
  then
    printf "%b\n" "  ${RED}Route table mismatch." >> $LOG
    cat $INTRADO/etc/routetable.output >> $LOG
    echo -en "${RESET}" >> $LOG
  fi
}


######################
### Check the status of rrdtool; should be running on Linux and Sun systems
######################

check_rrdtool() {
  if [[ $OS = "Linux" ]] || [[ $OS = "SunOS" ]]
  then
    UPDATERRD=`ps -e | grep updaterrd`
    if [[ -z $UPDATERRD ]]
    then
      printf "%b\n" "  ${YELLOW}rrdtool is not configured or running${RESET}" >> $LOG
    fi
  fi
}


######################
### Check the time sources
######################

check_time() {
# if chrony is running (Red Hat 7 mostly)
  if [[ -f /bin/chronyc ]]
  then
    T_MSG='chrony'
    T_COMMAND='/bin/chronyc -n sources'
    T_CONFIG='/etc/chrony.conf'
  fi

# everything else; Sun and older Red Hat
  if [[ -f /usr/sbin/ntpq ]]
  then
    T_MSG='ntp'
    T_COMMAND='/usr/sbin/ntpq -pn'
    if [[ $OS = 'SunOS' ]]
    then
      T_CONFIG='/etc/inet/ntp.conf'
    else
      T_CONFIG='/etc/ntp.conf'
    fi
  fi

  printf "%b\n" "  ${GREEN}Checking ${T_MSG} time sources.${RESET}" >> $LOG

  echo "ping check of time server: 10.100.228.31"
  ping -c 1 10.100.228.31 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    printf "%b\n" "    ${GREEN}Longmont (10.100.228.31) is pingable.${RESET}" >> $LOG
    OUTPUT=`${T_COMMAND} | grep 10.100.228.31`
    if [[ -z $OUTPUT ]]
    then
      printf "%b\n" "    ${RED}Longmont time server (10.100.228.31) is not in the ${T_CONFIG} configuration.${RESET}" >> $LOG
    else
      echo "time check of time server: 10.100.228.31"
      ntpdate -q 10.100.228.31 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}Longmont time server (10.100.228.31) is providing time.${RESET}" >> $LOG
      else
        printf "%b\n" "    ${RED}Longmont time server (10.100.228.31:UDP/123) is not reachable.${RESET}" >> $LOG
      fi
    fi
  else
    printf "%b\n" "    ${GREEN}Longmont (10.100.228.31) is not pingable.${RESET}" >> $LOG
  fi

  echo "ping check of time server: 192.168.200.20"
  ping -c 1 192.168.200.20 > /dev/null 2>&1
  if [[ $? = 0 ]]
  then
    printf "%b\n" "    ${GREEN}Miami (192.168.200.20) is pingable.${RESET}" >> $LOG
    OUTPUT=`${T_COMMAND} | grep 192.168.200.20`
    if [[ -z $OUTPUT ]]
    then
      printf "%b\n" "    ${RED}Miami time server (192.168.200.20) is not in the ${T_CONFIG} configuration.${RESET}" >> $LOG
    else
      echo "time check of time server: 192.168.200.20"
      ntpdate -q 192.168.200.20 > /dev/null 2>&1
      if [[ $? = 0 ]]
      then
        printf "%b\n" "    ${GREEN}Miami time server (192.168.200.20) is providing time.${RESET}" >> $LOG
      else
        printf "%b\n" "    ${RED}Miami time server (192.168.200.20:UDP/123) is not reachable.${RESET}" >> $LOG
      fi
    fi
  else
    printf "%b\n" "    ${GREEN}Miami (192.168.200.20) is not pingable.${RESET}" >> $LOG
  fi

  DRIFTFILE=`grep driftfile ${T_CONFIG} | awk '{print $2}'`
  DRIFTPATH=`dirname $DRIFTFILE`
  if [[ -d ${DRIFTPATH} ]]
  then
    if [[ ! -f ${DRIFTFILE} ]]
    then
      printf "%b\n" "    ${YELLOW}${T_MSG} drift file (${DRIFTFILE}) does not exist.${RESET}" >> $LOG
    fi
  else
    printf "%b\n" "    ${RED}${T_MSG} drift file path (${DRIFTPATH}) does not exist.${RESET}" >> $LOG
  fi

}


######################
### Check the vmware agent
######################

check_vmware_agent() {
  if [[ -f /usr/bin/vmtoolsd ]] || [[ -f /usr/sbin/vmtoolsd ]]
  then
    printf "%b\n" "  ${GREEN}VMWare Agent is installed${RESET}" >> $LOG
    VMWARE=`ps -e | grep vmtoolsd`
    if [[ -z $VMWARE ]]
    then
      printf "%b\n" "    ${YELLOW}VMWare Agent is not running${RESET}" >> $LOG
    else
      printf "%b\n" "    ${GREEN}VMWare Agent is running${RESET}" >> $LOG
    fi
  else
    printf "%b\n" "  ${YELLOW}VMWare Agent is not installed${RESET}" >> $LOG
  fi
}

######################
### End of Functions
######################



echo "" > $LOG
echo "================================" >> $LOG
echo "Running System Validation Script" >> $LOG
echo "================================" >> $LOG
echo "" >> $LOG

printf "%b\n" "${GREEN}Passed${RESET} - Test or value was successful" >> $LOG
printf "%b\n" "${YELLOW}Warning${RESET} - Setting should be reviewed and corrected if appropriate" >> $LOG
printf "%b\n" "${RED}Error${RESET} - Must be corrected due to vulnerability or system stability issue" >> $LOG
echo "" >> $LOG

echo "Note:"
echo "  Ping checks have a count of 1"
echo "  Netcat (nc) checks have a wait of 2"
echo ""


###########
### Linux
### Red Hat
###########

if [[ $OS = "Linux" ]]
then
  if [[ `id -u` -ne 0 ]]
  then
    printf "%b" "${RED}Due to the checks, this script must be run by root.${RESET}\n"
    exit 0
  fi


  check_hostname

# Step 5: sudoers check
  if [[ -f /etc/sudoers ]]
  then
    grep -qi ${HOSTNAME} /etc/sudoers
    if [[ $? = 1 ]]
    then
      printf "%b\n" "  ${YELLOW}/etc/sudoers doesn't contain ${HOSTNAME} alias${RESET}" >> $LOG
    fi
  else
    printf "%b\n" "  ${RED}/etc/sudoers not found${RESET}" >> $LOG
  fi

  check_resolver

  check_routetable

  check_time

  check_email

  check_jumpstart

  check_redhat_subscription

  check_group_membership

  check_default_passwords

  check_privileged_access

  check_active_employees

  check_vmware_agent

  check_rrdtool

  check_cfg2html

# Step 18: was /opt/intrado/bin/intrado run?
  if [[ ! -f /opt/intrado/var/intrado.log ]]
  then
    printf "%b\n" "  ${YELLOW}The /opt/intrado/bin/intrado script hasn't run yet.${RESET}" >> $LOG
    CRON=`grep -v "^#" /var/spool/cron/root | grep "/opt/intrado/bin/intrado"`
    if [[ -z $CRON ]]
    then
      printf "%b\n" "  ${RED}Need to update root's cron${RESET}" >> $LOG
    fi
  fi


# Step 17: is there a link in /usr/bin/ksh from /bin/ksh?
  if [[ ! -f /usr/bin/ksh ]]
  then
    printf "%b\n" "  ${RED}Need to create a symbolic link between /bin/ksh and /usr/bin/ksh${RESET}" >> $LOG
  fi

  check_removeips

#####
# Check the status of installed agents
#####

  check_openview

  check_netbackup

  check_data_palette

  check_opnet

  check_centrify

# these checks are pulled from the auto-generated chkserver.input file.
  if [[ -f /opt/intrado/etc/chkserver.input ]]
  then

    for j in `egrep "^(${HOSTNAME}|\*):" /opt/intrado/etc/chkserver.input`
    do

      FIELD2=`echo $j | cut -f2 -d:`
      FIELD3=`echo $j | cut -f3 -d:`
      FIELD4=`echo $j | cut -f4 -d:`

      if [[ $FIELD2 = 'CPU' ]]
      then
        COUNT=`grep -c processor /proc/cpuinfo`
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows $COUNT CPUs where expected is $FIELD3 CPUs${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}$COUNT CPUs as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Memory' ]]
      then
        COUNT=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 / 1024 + 1 ))
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows ${COUNT}G where expected is ${FIELD3}G${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}${COUNT}G of Memory as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'IP' ]]
      then
        if [[ -f /sbin/ip ]]
        then
          IPADDR=/sbin/ip
        fi
        if [[ -f /usr/sbin/ip ]]
        then
          IPADDR=/usr/sbin/ip
        fi
        ${IPADDR} addr | grep -q " ${FIELD3}/"
        if [[ $? = 0 ]]
        then
          INTERFACE=`grep ${FIELD3}$ /etc/sysconfig/network-scripts/ifcfg-* | cut -f1 -d: | cut -f3 -d-`
          printf "%b\n" "  ${GREEN}IP $FIELD3 configured as ${INTERFACE}${RESET}" >> $LOG
          egrep -qi "onboot.*yes" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${GREEN}${INTERFACE} is configured to start on boot${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}${INTERFACE} is not configured to start on boot${RESET}" >> $LOG
          fi
          grep -qi ${FIELD3} /etc/hosts
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${YELLOW}${FIELD3} is not in /etc/hosts${RESET}" >> $LOG
          fi
          PRIVATE=`ipcalc -n ${FIELD4}/24 | cut -f2 -d=`
          if [[ ${PRIVATE} = '192.168.0.0' ]]
          then
            printf "%b\n" "    ${GREEN}Gateway ${FIELD4} is on a Private network${RESET}" >> $LOG
          else
            echo "ping check of the gateway: ${FIELD4}"
            ping -c 1 ${FIELD4} > /dev/null 2>&1
            if [[ $? = 0 ]]
            then
              printf "%b\n" "    ${GREEN}Gateway ${FIELD4} accessible${RESET}" >> $LOG
            else
              printf "%b\n" "    ${RED}Gateway ${FIELD4} is not responding to ping${RESET}" >> $LOG
            fi
          fi
          GATEWAY="${GATEWAY} ${FIELD4}"
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
# check the interface file too
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network-scripts/ifcfg-${INTERFACE}:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in ip addr output${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Service' ]]
      then
        grep -q "^${FIELD3}:" /etc/passwd
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Service Account ${FIELD3} exists${RESET}" >> $LOG
          PASSWORD=`chage -l ${FIELD3} | grep 'Password expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $PASSWORD = 'never   ' ]]
          then
            printf "%b\n" "    ${GREEN}Password doesn't expire${RESET}" >> $LOG
          else
            if [[ $PASSWORD = 'password must be changed' ]]
            then
              printf "%b\n" "    ${RED}Password expires date/message: ${PASSWORD}${RESET} You must change the service account password: ${FIELD3}" >> $LOG
            else
              printf "%b\n" "    ${RED}Password expires date/message: ${PASSWORD}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
            fi
          fi
          ACCOUNT=`chage -l ${FIELD3} | grep 'Account expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $ACCOUNT = 'never   ' ]]
          then
            printf "%b\n" "    ${GREEN}Account doesn't expire${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}Account expires: ${ACCOUNT}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/passwd${RESET}" >> $LOG
        fi
# special checks for special accounts.
        if [[ ${FIELD3} = 'nginx' ]]
        then
          grep -qi 640 /etc/logrotate.d/nginx
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Update /etc/logrotate.d/nginx create permissions to 644.${RESET} vi /etc/logrotate.d/nginx" >> $LOG
          fi
          grep -qi nginx /etc/sudoers
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${RED}Update sudoers to add the Web Apps nginx rule.${RESET}" >> $LOG
          fi
          ls -l /var/log/nginx/* | head -1 | grep -q "^-rw-r-----"
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Change the permissions of /var/log/nginx to 644.${RESET} chmod 644 /var/log/nginx/*" >> $LOG
          fi
        fi
      fi
    
      if [[ $FIELD2 = 'Group' ]]
      then
        grep -q "^${FIELD3}:" /etc/group
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Group ${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/group${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Sudoers' ]]
      then
        grep -q "^%${FIELD3}" /etc/sudoers
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Sudoers group %${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${YELLOW}Unable to locate %${FIELD3} in /etc/sudoers${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Openview' ]]
      then
        if [[ ! -d /opt/OV/bin ]]
        then
          printf "%b\n" "  ${RED}OpenView is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Netbackup' ]]
      then
        if [[ ! -f /usr/openv/netbackup/bp.conf ]]
        then
          printf "%b\n" "  ${RED}NetBackup is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Datapalette' ]]
      then
        if [[ ! -f /opt/datapalette/bin/datapal ]]
        then
          printf "%b\n" "  ${RED}Data Palette is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'OpNet' ]]
      then
        if [[ ! -d /opt/Panorama ]]
        then
          printf "%b\n" "  ${RED}OpNet is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Centrify' ]]
      then
        if [[ ! -f /usr/sbin/adclient ]]
        then
          printf "%b\n" "  ${RED}Centrify is not installed${RESET}" >> $LOG
        fi
      fi

    done

# if gateway has been found (eg there are IP entries)
    if [[ ! -z ${GATEWAY} ]]
    then
      printf "%b\n" "  ${GREEN}Default gateway entry found${RESET}" >> $LOG
      if [[ ${GWFLAG} = 'yes' ]]
      then
        if [[ ! -z ${GWMSG} ]]
        then
          printf "%b\n" "$GWMSG" >> $LOG
        fi
      else
        printf "%b\n" "    ${RED}None of the configured interface gateways were found in /etc/sysconfig/network${RESET}" >> $LOG
      fi
    fi

  else 
    printf "%b\n" "${RED}chkserver.input file not found${RESET}" >> $LOG
  fi
fi



###########
### HP-UX
###########

if [[ $OS = "HP-UX" ]]
then
  if [[ `id -u` -ne 0 ]]
  then
    printf "%b\n" "${RED}Due to the checks, this script must be run by root.${RESET}"
    exit 0
  fi

  check_hostname

# Step 5: sudoers check
  if [[ -f /etc/sudoers ]]
  then
    grep -qi ${HOSTNAME} /etc/sudoers
    if [[ $? = 1 ]]
    then
      printf "%b\n" "  ${YELLOW}/etc/sudoers doesn't contain ${HOSTNAME} alias${RESET}" >> $LOG
    fi
  else
    printf "%b\n" "  ${RED}/etc/sudoers not found${RESET}" >> $LOG
  fi

  check_resolver

  check_routetable

  check_time

  check_email

  check_jumpstart

  check_redhat_subscription

  check_group_membership

  check_default_passwords

  check_privileged_access

  check_active_employees

  check_vmware_agent

  check_rrdtool

  check_cfg2html

# Step 18: was /opt/intrado/bin/intrado run?
  if [[ ! -f /opt/intrado/var/intrado.log ]]
  then
    printf "%b\n" "  ${YELLOW}The /opt/intrado/bin/intrado script hasn't run yet.${RESET}" >> $LOG
    CRON=`grep -v "^#" /var/spool/cron/root | grep "/opt/intrado/bin/intrado"`
    if [[ -z $CRON ]]
    then
      printf "%b\n" "  ${RED}Need to update root's cron${RESET}" >> $LOG
    fi
  fi


# Step 17: is there a link in /usr/bin/ksh from /bin/ksh?
#  if [[ ! -f /usr/bin/ksh ]]
#  then
#    printf "%b\n" "  ${RED}Need to create a symbolic link between /bin/ksh and /usr/bin/ksh${RESET}" >> $LOG
#  fi

  check_removeips

#####
# Check the status of installed agents
#####

  check_openview

  check_netbackup

  check_data_palette

  check_opnet

  check_centrify

# these checks are pulled from the auto-generated chkserver.input file.
  if [[ -f /opt/intrado/etc/chkserver.input ]]
  then

    for j in `egrep "^(${HOSTNAME}|\*):" /opt/intrado/etc/chkserver.input`
    do

      FIELD2=`echo $j | cut -f2 -d:`
      FIELD3=`echo $j | cut -f3 -d:`
      FIELD4=`echo $j | cut -f4 -d:`

      if [[ $FIELD2 = 'CPU' ]]
      then
        COUNT=`grep -c processor /proc/cpuinfo`
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows $COUNT CPUs where expected is $FIELD3 CPUs${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}$COUNT CPUs as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Memory' ]]
      then
        COUNT=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 / 1024 + 1 ))
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows ${COUNT}G where expected is ${FIELD3}G${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}${COUNT}G of Memory as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'IP' ]]
      then
        if [[ -f /sbin/ip ]]
        then
          IPADDR=/sbin/ip
        fi
        if [[ -f /usr/sbin/ip ]]
        then
          IPADDR=/usr/sbin/ip
        fi
        ${IPADDR} addr | grep -q " ${FIELD3}/"
        if [[ $? = 0 ]]
        then
          INTERFACE=`grep ${FIELD3}$ /etc/sysconfig/network-scripts/ifcfg-* | cut -f1 -d: | cut -f3 -d-`
          printf "%b\n" "  ${GREEN}IP $FIELD3 configured as ${INTERFACE}${RESET}" >> $LOG
          egrep -qi "onboot.*yes" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${GREEN}${INTERFACE} is configured to start on boot${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}${INTERFACE} is not configured to start on boot${RESET}" >> $LOG
          fi
          grep -qi ${FIELD3} /etc/hosts
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${YELLOW}${FIELD3} is not in /etc/hosts${RESET}" >> $LOG
          fi
          PRIVATE=`ipcalc -n ${FIELD4}/24 | cut -f2 -d=`
          if [[ ${PRIVATE} = '192.168.0.0' ]]
          then
            printf "%b\n" "    ${GREEN}Gateway ${FIELD4} is on a Private network${RESET}" >> $LOG
          else
            echo "ping check of the gateway: ${FIELD4}"
            ping -c 1 ${FIELD4} > /dev/null 2>&1
            if [[ $? = 0 ]]
            then
              printf "%b\n" "    ${GREEN}Gateway ${FIELD4} accessible${RESET}" >> $LOG
            else
              printf "%b\n" "    ${RED}Gateway ${FIELD4} is not responding to ping${RESET}" >> $LOG
            fi
          fi
          GATEWAY="${GATEWAY} ${FIELD4}"
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
# check the interface file too
          grep -q "GATEWAY=${FIELD4}" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE}
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network-scripts/ifcfg-${INTERFACE}:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in ip addr output${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Service' ]]
      then
        grep -q "^${FIELD3}:" /etc/passwd
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Service Account ${FIELD3} exists${RESET}" >> $LOG
          PASSWORD=`chage -l ${FIELD3} | grep 'Password expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $PASSWORD = 'never   ' ]]
          then
            printf "%b\n" "    ${GREEN}Password doesn't expire${RESET}" >> $LOG
          else
            if [[ $PASSWORD = 'password must be changed' ]]
            then
              printf "%b\n" "    ${RED}Password expires date/message: ${PASSWORD}${RESET} You must change the service account password: ${FIELD3}" >> $LOG
            else
              printf "%b\n" "    ${RED}Password expires date/message: ${PASSWORD}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
            fi
          fi
          ACCOUNT=`chage -l ${FIELD3} | grep 'Account expires' | awk '{print $4" "$5" "$6" "$7}'`
          if [[ $ACCOUNT = 'never   ' ]]
          then
            printf "%b\n" "    ${GREEN}Account doesn't expire${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}Account expires: ${ACCOUNT}${RESET} chage -E -1 -M -1 -I -1 ${FIELD3}" >> $LOG
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/passwd${RESET}" >> $LOG
        fi
# special checks for special accounts.
        if [[ ${FIELD3} = 'nginx' ]]
        then
          grep -qi 640 /etc/logrotate.d/nginx
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Update /etc/logrotate.d/nginx create permissions to 644.${RESET} vi /etc/logrotate.d/nginx" >> $LOG
          fi
          grep -qi nginx /etc/sudoers
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${RED}Update sudoers to add the Web Apps nginx rule.${RESET}" >> $LOG
          fi
          ls -l /var/log/nginx/* | head -1 | grep -q "^-rw-r-----"
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Change the permissions of /var/log/nginx to 644.${RESET} chmod 644 /var/log/nginx/*" >> $LOG
          fi
        fi
      fi
    
      if [[ $FIELD2 = 'Group' ]]
      then
        grep -q "^${FIELD3}:" /etc/group
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Group ${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/group${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Sudoers' ]]
      then
        grep -q "^%${FIELD3}" /etc/sudoers
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Sudoers group %${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${YELLOW}Unable to locate %${FIELD3} in /etc/sudoers${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Openview' ]]
      then
        if [[ ! -d /opt/OV/bin ]]
        then
          printf "%b\n" "  ${RED}OpenView is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Netbackup' ]]
      then
        if [[ ! -f /usr/openv/netbackup/bp.conf ]]
        then
          printf "%b\n" "  ${RED}NetBackup is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Datapalette' ]]
      then
        if [[ ! -f /opt/datapalette/bin/datapal ]]
        then
          printf "%b\n" "  ${RED}Data Palette is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'OpNet' ]]
      then
        if [[ ! -d /opt/Panorama ]]
        then
          printf "%b\n" "  ${RED}OpNet is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Centrify' ]]
      then
        if [[ ! -f /usr/sbin/adclient ]]
        then
          printf "%b\n" "  ${RED}Centrify is not installed${RESET}" >> $LOG
        fi
      fi

    done

# if gateway has been found (eg there are IP entries)
    if [[ ! -z ${GATEWAY} ]]
    then
      printf "%b\n" "  ${GREEN}Default gateway entry found${RESET}" >> $LOG
      if [[ ${GWFLAG} = 'yes' ]]
      then
        if [[ ! -z ${GWMSG} ]]
        then
          printf "%b\n" "$GWMSG" >> $LOG
        fi
      else
        printf "%b\n" "    ${RED}None of the configured interface gateways were found in /etc/sysconfig/network${RESET}" >> $LOG
      fi
    fi

  else 
    printf "%b\n" "${RED}chkserver.input file not found${RESET}" >> $LOG
  fi
fi



###########
### Solaris
### SunOS
###########

if [[ $OS = "SunOS" ]]
then
  if [[ `id | cut -f2 -d= | cut -f1 -d\(` -ne 0 ]]
  then
    printf "%b\n" "${RED}Due to the checks, this script must be run by root.${RESET}"
    exit 0
  fi

  check_hostname

# Step 5: sudoers check
  if [[ -f /etc/sudoers ]]
  then
    grep -i ${HOSTNAME} /etc/sudoers > /dev/null
    if [[ $? = 1 ]]
    then
      printf "%b\n" "  ${YELLOW}/etc/sudoers doesn't contain ${HOSTNAME} alias${RESET}" >> $LOG
    fi
  else
    printf "%b\n" "  ${RED}/etc/sudoers not found${RESET}" >> $LOG
  fi

  check_resolver

  check_routetable

  check_time

  check_email

  check_jumpstart

  check_redhat_subscription

  check_group_membership

  check_default_passwords

  check_privileged_access

  check_active_employees

  check_vmware_agent

  check_rrdtool

  check_cfg2html


# Step 18: was /opt/intrado/bin/intrado run?
  if [[ ! -f /opt/intrado/var/intrado.log ]]
  then
    printf "%b\n" "  ${YELLOW}The /opt/intrado/bin/intrado script hasn't run yet.${RESET}" >> $LOG
    CRON=`grep -v "^#" /var/spool/cron/root | grep "/opt/intrado/bin/intrado"`
    if [[ -z $CRON ]]
    then
      printf "%b\n" "  ${RED}Need to update root's cron${RESET}" >> $LOG
    fi
  fi


# Step 17: is there a link in /usr/bin/ksh from /bin/ksh?
  if [[ ! -f /usr/bin/ksh ]]
  then
    printf "%b\n" "  ${RED}Need to create a symbolic link between /bin/ksh and /usr/bin/ksh${RESET}" >> $LOG
  fi

  check_removeips

#####
# Check the status of installed agents
#####

  check_openview

  check_netbackup

  check_data_palette

  check_opnet

  check_centrify

# these checks are pulled from the auto-generated chkserver.input file.
# TOTAL is incremented when any value is found, reporting a warning if nothing for this server is in the file.
  TOTAL=0
  if [[ -f /opt/intrado/etc/chkserver.input ]]
  then

    for j in `egrep "^(${HOSTNAME}|\*):" /opt/intrado/etc/chkserver.input`
    do

      FIELD2=`echo $j | cut -f2 -d:`
      FIELD3=`echo $j | cut -f3 -d:`
      FIELD4=`echo $j | cut -f4 -d:`

      if [[ $FIELD2 = 'CPU' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        COUNT=`grep -c processor /proc/cpuinfo`
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows $COUNT CPUs where expected is $FIELD3 CPUs${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}$COUNT CPUs as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Memory' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        COUNT=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 / 1024 + 1 ))
        if [[ $COUNT -ne $FIELD3 ]]
        then
          printf "%b\n" "  ${RED}System shows ${COUNT}G where expected is ${FIELD3}G${RESET}" >> $LOG
        else
          printf "%b\n" "  ${GREEN}${COUNT}G of Memory as expected${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'IP' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ -f /sbin/ip ]]
        then
          IPADDR=/sbin/ip
        fi
        if [[ -f /usr/sbin/ip ]]
        then
          IPADDR=/usr/sbin/ip
        fi
        ${IPADDR} addr | grep " ${FIELD3}/" > /dev/null
        if [[ $? = 0 ]]
        then
          INTERFACE=`grep ${FIELD3}$ /etc/sysconfig/network-scripts/ifcfg-* | cut -f1 -d: | cut -f3 -d-`
          printf "%b\n" "  ${GREEN}IP $FIELD3 configured as ${INTERFACE}${RESET}" >> $LOG
          egrep -i "onboot.*yes" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE} > /dev/null
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${GREEN}${INTERFACE} is configured to start on boot${RESET}" >> $LOG
          else
            printf "%b\n" "    ${RED}${INTERFACE} is not configured to start on boot${RESET}" >> $LOG
          fi
          grep -i ${FIELD3} /etc/hosts > /dev/null
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${YELLOW}${FIELD3} is not in /etc/hosts${RESET}" >> $LOG
          fi
          PRIVATE=`ipcalc -n ${FIELD4}/24 | cut -f2 -d=`
          if [[ ${PRIVATE} = '192.168.0.0' ]]
          then
            printf "%b\n" "    ${GREEN}Gateway ${FIELD4} is on a Private network${RESET}" >> $LOG
          else
           echo "ping check of the gateway: ${FIELD4}"
            ping -c 1 ${FIELD4} > /dev/null 2>&1
            if [[ $? = 0 ]]
            then
              printf "%b\n" "    ${GREEN}Gateway ${FIELD4} accessible${RESET}" >> $LOG
            else
              printf "%b\n" "    ${RED}Gateway ${FIELD4} is not responding to ping${RESET}" >> $LOG
            fi
          fi
          GATEWAY="${GATEWAY} ${FIELD4}"
          grep "GATEWAY=${FIELD4}" /etc/sysconfig/network > /dev/null
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
# check the interface file too
          grep "GATEWAY=${FIELD4}" /etc/sysconfig/network-scripts/ifcfg-${INTERFACE} > /dev/null
          if [[ $? = 0 ]]
          then
            GWMSG="${GWMSG}    ${GREEN}/etc/sysconfig/network-scripts/ifcfg-${INTERFACE}:GATEWAY=${FIELD4} configured${RESET}\n"
            GWFLAG='yes'
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in ip addr output${RESET}" >> $LOG
        fi
      fi

      if [[ $FIELD2 = 'Service' ]]
      then
        grep "^${FIELD3}:" /etc/passwd > /dev/null
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Service Account ${FIELD3} exists${RESET}" >> $LOG
          PASSWORD=`grep "^${FIELD3}:" /etc/shadow | cut -f5 -d:`
          if [[ $PASSWORD = '' ]]
          then
            printf "%b\n" "    ${GREEN}Password doesn't expire${RESET}" >> $LOG
          else
            PASSWORD=`passwd -s | awk '{print $3}'`
            if [[ $PASSWORD = '00/00/00' ]]
            then
              printf "%b\n" "    ${RED}Password has not been changed since the account was created and has expired.${RESET} passwd -x -1 ${FIELD3}" >> $LOG
            else
              printf "%b\n" "    ${RED}Password expires${RESET} passwd -x -1 ${FIELD3}" >> $LOG
            fi
          fi
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/passwd${RESET}" >> $LOG
        fi
# special checks for special accounts.
        if [[ ${FIELD3} = 'nginx' ]]
        then
          grep -i 640 /etc/logrotate.d/nginx > /dev/null
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Update /etc/logrotate.d/nginx create permissions to 644.${RESET} vi /etc/logrotate.d/nginx" >> $LOG
          fi
          grep -i nginx /etc/sudoers > /dev/null
          if [[ $? = 1 ]]
          then
            printf "%b\n" "    ${RED}Update sudoers to add the Web Apps nginx rule.${RESET}" >> $LOG
          fi
          ls -l /var/log/nginx/* | head -1 | grep "^-rw-r-----" > /dev/null
          if [[ $? = 0 ]]
          then
            printf "%b\n" "    ${RED}Change the permissions of /var/log/nginx to 644.${RESET} chmod 644 /var/log/nginx/*" >> $LOG
          fi
        fi
      fi
    
      if [[ $FIELD2 = 'Group' ]]
      then
        grep "^${FIELD3}:" /etc/group > /dev/null
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Group ${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${RED}Unable to locate ${FIELD3} in /etc/group${RESET}" >> $LOG
        fi
      fi
    
      if [[ $FIELD2 = 'Sudoers' ]]
      then
        grep "^%${FIELD3}" /etc/sudoers > /dev/null
        if [[ $? = 0 ]]
        then
          printf "%b\n" "  ${GREEN}Sudoers group %${FIELD3} exists${RESET}" >> $LOG
        else
          printf "%b\n" "  ${YELLOW}Unable to locate %${FIELD3} in /etc/sudoers${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Openview' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ ! -d /opt/OV/bin ]]
        then
          printf "%b\n" "  ${RED}OpenView is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Netbackup' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ ! -f /usr/openv/netbackup/bp.conf ]]
        then
          printf "%b\n" "  ${RED}NetBackup is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Datapalette' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ ! -f /opt/datapalette/bin/datapal ]]
        then
          printf "%b\n" "  ${RED}Data Palette is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'OpNet' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ ! -d /opt/Panorama ]]
        then
          printf "%b\n" "  ${RED}OpNet is not installed${RESET}" >> $LOG
        fi
      fi

# it's supposed to be installed, let's check
      if [[ $FIELD2 = 'Centrify' ]]
      then
        TOTAL=$(( $TOTAL + 1 ))
        if [[ ! -f /usr/sbin/adclient ]]
        then
          printf "%b\n" "  ${RED}Centrify is not installed${RESET}" >> $LOG
        fi
      fi

    done

# if gateway has been found (eg there are IP entries)
    if [[ ! -z ${GATEWAY} ]]
    then
      printf "%b\n" "  ${GREEN}Default gateway entry found${RESET}" >> $LOG
      if [[ ${GWFLAG} = 'yes' ]]
      then
        if [[ ! -z ${GWMSG} ]]
        then
          printf "%b\n" "$GWMSG" >> $LOG
        fi
      else
        printf "%b\n" "    ${RED}None of the configured interface gateways were found in /etc/sysconfig/network${RESET}" >> $LOG
      fi
    fi

  else 
    printf "%b\n" "${RED}chkserver.input file not found${RESET}" >> $LOG
  fi

  if [[ $TOTAL = 0 ]]
  then
    printf "%b\n" "    ${YELLOW}No Inventory configuration built entries found${RESET}" >> $LOG
  fi
fi


echo "" >> $LOG
echo "External steps to be performed:" >> $LOG
echo "" >> $LOG
echo "1. Check service processor password" >> $LOG
echo "2. Have the unixsvc account ssh to this system to make sure it all works." >> $LOG
echo "3. Have the unixsvc account copy the cfghtml file: $HOSTNAME.html to the jumpstart server" >> $LOG

if [[ ! -z $1 ]]
then
  cat $LOG
fi

