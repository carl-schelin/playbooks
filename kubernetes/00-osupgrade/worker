#!/bin/bash

# Carl Schelin
# The intention is to loop through the worker nodes and upgrade the sytems as we go
# There should be a check of the server, to see if it's Ready
# Then removing it from the pool before patching and rebooting
# Once done, uncordon the worker node 
# Then verify that a server is again Ready before moving on to the next server.

function usage() {
  echo "Usage:"
  echo "update -eht [tag] "
  echo "where:"
  echo " -h help"
  echo " -e enable check - Enable --check to validate task"
  echo " -t the tag which identifies the cluster to update"
  echo "    use 'searchansible' to list possible tags"
}

if [[ $(id -u) -ne 5000 ]]
then
  echo "This script must be run by the unixsvc account."
  echo ""
  exit 1
fi

if [[ -z $1 ]]
then
  usage
  exit 0
fi

HOSTS="/usr/local/admin/etc/hosts"
OPTTAG=''
while getopts "eht:" arg
do
  case $arg in
    e) OPTCHECK="--check"
       ;;
    t) OPTTAG="${OPTARG}"
       ;;
    h) usage
       exit 0
       ;;
  esac
done

# remove *.retry files
if [[ -f *.retry ]]
then
  rm *.retry
fi

if [[ ! -f ${HOSTS} ]]
then
  echo "You are not on an ansible server. ${HOSTS} not found."
  echo ""
  exit 1
fi

if [[ -z ${OPTTAG} ]]
then
  echo "Error: you must pass a tag value"
  echo ""
  usage
  exit 0
fi

/usr/local/bin/searchansible ${OPTTAG} > /dev/null 2>&1
if [[ $? -eq 0 ]]
then
  echo "Starting OS upgrades"
  for i in $(/usr/local/bin/searchansible ${OPTTAG} | egrep -v "(Searching|\[${OPTTAG}\])")
  do
    NODE=$(kubectl get nodes | grep $i | awk '{print $1}')

    echo "Checking $NODE status"
    kubectl get node $NODE | grep NotReady
    if [[ $? -gt 0 ]]
    then
      echo "Node $NODE is Ready, removing from pool"
      kubectl drain $NODE --delete-local-data --ignore-daemonsets
      ansible-playbook -i $i, upgrade.yaml
    fi
    kubectl uncordon $NODE
    echo "Five second pause for node to get back into the pool"
    sleep 5
    kubectl get node $NODE | grep NotReady
    if [[ $? -eq 0 ]]
    then
      echo "Node $i is not working, exiting"
      exit 1
    fi
  done
else
  echo "Unable to locate ${OPTTAG} in the ${HOSTS} hosts file"
fi

exit 0

